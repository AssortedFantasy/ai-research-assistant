diff --git a/node_modules/react-mentions/dist/react-mentions.cjs.dev.js b/node_modules/react-mentions/dist/react-mentions.cjs.dev.js
index 9d077e9..0f755f2 100644
--- a/node_modules/react-mentions/dist/react-mentions.cjs.dev.js
+++ b/node_modules/react-mentions/dist/react-mentions.cjs.dev.js
@@ -1,135 +1,135 @@
-'use strict';
-
-Object.defineProperty(exports, '__esModule', { value: true });
-
-function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
-
-var _toConsumableArray = _interopDefault(require('@babel/runtime/helpers/toConsumableArray'));
-var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
-var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'));
-var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'));
-var _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'));
-var _inherits = _interopDefault(require('@babel/runtime/helpers/inherits'));
-var _possibleConstructorReturn = _interopDefault(require('@babel/runtime/helpers/possibleConstructorReturn'));
-var _getPrototypeOf = _interopDefault(require('@babel/runtime/helpers/getPrototypeOf'));
-var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'));
-var React = require('react');
-var React__default = _interopDefault(React);
-var invariant = _interopDefault(require('invariant'));
-var _slicedToArray = _interopDefault(require('@babel/runtime/helpers/slicedToArray'));
-var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'));
-var useStyles = require('substyle');
-var useStyles__default = _interopDefault(useStyles);
-var PropTypes = _interopDefault(require('prop-types'));
-var ReactDOM = _interopDefault(require('react-dom'));
+'use strict'
+
+Object.defineProperty(exports, '__esModule', { value: true })
+
+function _interopDefault(ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex }
+
+var _toConsumableArray = _interopDefault(require('@babel/runtime/helpers/toConsumableArray'))
+var _extends = _interopDefault(require('@babel/runtime/helpers/extends'))
+var _classCallCheck = _interopDefault(require('@babel/runtime/helpers/classCallCheck'))
+var _createClass = _interopDefault(require('@babel/runtime/helpers/createClass'))
+var _assertThisInitialized = _interopDefault(require('@babel/runtime/helpers/assertThisInitialized'))
+var _inherits = _interopDefault(require('@babel/runtime/helpers/inherits'))
+var _possibleConstructorReturn = _interopDefault(require('@babel/runtime/helpers/possibleConstructorReturn'))
+var _getPrototypeOf = _interopDefault(require('@babel/runtime/helpers/getPrototypeOf'))
+var _defineProperty = _interopDefault(require('@babel/runtime/helpers/defineProperty'))
+var React = require('react')
+var React__default = _interopDefault(React)
+var invariant = _interopDefault(require('invariant'))
+var _slicedToArray = _interopDefault(require('@babel/runtime/helpers/slicedToArray'))
+var _objectWithoutProperties = _interopDefault(require('@babel/runtime/helpers/objectWithoutProperties'))
+var useStyles = require('substyle')
+var useStyles__default = _interopDefault(useStyles)
+var PropTypes = _interopDefault(require('prop-types'))
+var ReactDOM = _interopDefault(require('react-dom'))
 
 // escape RegExp special characters https://stackoverflow.com/a/9310752/5142490
 var escapeRegex = function escapeRegex(str) {
-  return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
-};
+  return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
+}
 
 var PLACEHOLDERS = {
   id: '__id__',
   display: '__display__'
-};
+}
 
 var findPositionOfCapturingGroup = function findPositionOfCapturingGroup(markup, parameterName) {
-  invariant(parameterName === 'id' || parameterName === 'display', "Second arg must be either \"id\" or \"display\", got: \"".concat(parameterName, "\"")); // find positions of placeholders in the markup
+  invariant(parameterName === 'id' || parameterName === 'display', "Second arg must be either \"id\" or \"display\", got: \"".concat(parameterName, "\"")) // find positions of placeholders in the markup
 
-  var indexDisplay = markup.indexOf(PLACEHOLDERS.display);
-  var indexId = markup.indexOf(PLACEHOLDERS.id); // set indices to null if not found
+  var indexDisplay = markup.indexOf(PLACEHOLDERS.display)
+  var indexId = markup.indexOf(PLACEHOLDERS.id) // set indices to null if not found
 
-  if (indexDisplay < 0) indexDisplay = null;
-  if (indexId < 0) indexId = null; // markup must contain one of the mandatory placeholders
+  if (indexDisplay < 0) indexDisplay = null
+  if (indexId < 0) indexId = null // markup must contain one of the mandatory placeholders
 
-  invariant(indexDisplay !== null || indexId !== null, "The markup '".concat(markup, "' does not contain either of the placeholders '__id__' or '__display__'"));
+  invariant(indexDisplay !== null || indexId !== null, "The markup '".concat(markup, "' does not contain either of the placeholders '__id__' or '__display__'"))
 
   if (indexDisplay !== null && indexId !== null) {
     // both placeholders are used, return 0 or 1 depending on the position of the requested parameter
-    return parameterName === 'id' && indexId <= indexDisplay || parameterName === 'display' && indexDisplay <= indexId ? 0 : 1;
+    return parameterName === 'id' && indexId <= indexDisplay || parameterName === 'display' && indexDisplay <= indexId ? 0 : 1
   } // just one placeholder is being used, we'll use the captured string for both parameters
 
 
-  return 0;
-};
+  return 0
+}
 
 var combineRegExps = function combineRegExps(regExps) {
-  var serializedRegexParser = /^\/(.+)\/(\w+)?$/;
+  var serializedRegexParser = /^\/(.+)\/(\w+)?$/
   return new RegExp(regExps.map(function (regex) {
     var _serializedRegexParse = serializedRegexParser.exec(regex.toString()),
-        _serializedRegexParse2 = _slicedToArray(_serializedRegexParse, 3),
-        regexString = _serializedRegexParse2[1],
-        regexFlags = _serializedRegexParse2[2];
+      _serializedRegexParse2 = _slicedToArray(_serializedRegexParse, 3),
+      regexString = _serializedRegexParse2[1],
+      regexFlags = _serializedRegexParse2[2]
 
-    invariant(!regexFlags, "RegExp flags are not supported. Change /".concat(regexString, "/").concat(regexFlags, " into /").concat(regexString, "/"));
-    return "(".concat(regexString, ")");
-  }).join('|'), 'g');
-};
+    invariant(!regexFlags, "RegExp flags are not supported. Change /".concat(regexString, "/").concat(regexFlags, " into /").concat(regexString, "/"))
+    return "(".concat(regexString, ")")
+  }).join('|'), 'g')
+}
 
 var countPlaceholders = function countPlaceholders(markup) {
-  var count = 0;
-  if (markup.indexOf('__id__') >= 0) count++;
-  if (markup.indexOf('__display__') >= 0) count++;
-  return count;
-};
+  var count = 0
+  if (markup.indexOf('__id__') >= 0) count++
+  if (markup.indexOf('__display__') >= 0) count++
+  return count
+}
 
-var emptyFn = function emptyFn() {}; // Finds all occurrences of the markup in the value and calls the `markupIteratee` callback for each of them.
+var emptyFn = function emptyFn() { } // Finds all occurrences of the markup in the value and calls the `markupIteratee` callback for each of them.
 // The optional `textIteratee` callback is called for each plain text ranges in between these markup occurrences.
 
 
 var iterateMentionsMarkup = function iterateMentionsMarkup(value, config, markupIteratee) {
-  var textIteratee = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : emptyFn;
+  var textIteratee = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : emptyFn
   var regex = combineRegExps(config.map(function (c) {
-    return c.regex;
-  }));
-  var accOffset = 2; // first is whole match, second is the for the capturing group of first regexp component
+    return c.regex
+  }))
+  var accOffset = 2 // first is whole match, second is the for the capturing group of first regexp component
 
   var captureGroupOffsets = config.map(function (_ref) {
-    var markup = _ref.markup;
-    var result = accOffset; // + 1 is for the capturing group we add around each regexp component in combineRegExps
+    var markup = _ref.markup
+    var result = accOffset // + 1 is for the capturing group we add around each regexp component in combineRegExps
 
-    accOffset += countPlaceholders(markup) + 1;
-    return result;
-  });
-  var match;
-  var start = 0;
-  var currentPlainTextIndex = 0; // detect all mention markup occurrences in the value and iterate the matches
+    accOffset += countPlaceholders(markup) + 1
+    return result
+  })
+  var match
+  var start = 0
+  var currentPlainTextIndex = 0 // detect all mention markup occurrences in the value and iterate the matches
 
   while ((match = regex.exec(value)) !== null) {
     var offset = captureGroupOffsets.find(function (o) {
-      return !!match[o];
-    }); // eslint-disable-line no-loop-func
+      return !!match[o]
+    }) // eslint-disable-line no-loop-func
 
-    var mentionChildIndex = captureGroupOffsets.indexOf(offset);
+    var mentionChildIndex = captureGroupOffsets.indexOf(offset)
     var _config$mentionChildI = config[mentionChildIndex],
-        markup = _config$mentionChildI.markup,
-        displayTransform = _config$mentionChildI.displayTransform;
-    var idPos = offset + findPositionOfCapturingGroup(markup, 'id');
-    var displayPos = offset + findPositionOfCapturingGroup(markup, 'display');
-    var id = match[idPos];
-    var display = displayTransform(id, match[displayPos]);
-    var substr = value.substring(start, match.index);
-    textIteratee(substr, start, currentPlainTextIndex);
-    currentPlainTextIndex += substr.length;
-    markupIteratee(match[0], match.index, currentPlainTextIndex, id, display, mentionChildIndex, start);
-    currentPlainTextIndex += display.length;
-    start = regex.lastIndex;
+      markup = _config$mentionChildI.markup,
+      displayTransform = _config$mentionChildI.displayTransform
+    var idPos = offset + findPositionOfCapturingGroup(markup, 'id')
+    var displayPos = offset + findPositionOfCapturingGroup(markup, 'display')
+    var id = match[idPos]
+    var display = displayTransform(id, match[displayPos])
+    var substr = value.substring(start, match.index)
+    textIteratee(substr, start, currentPlainTextIndex)
+    currentPlainTextIndex += substr.length
+    markupIteratee(match[0], match.index, currentPlainTextIndex, id, display, mentionChildIndex, start)
+    currentPlainTextIndex += display.length
+    start = regex.lastIndex
   }
 
   if (start < value.length) {
-    textIteratee(value.substring(start), start, currentPlainTextIndex);
+    textIteratee(value.substring(start), start, currentPlainTextIndex)
   }
-};
+}
 
 var getPlainText = function getPlainText(value, config) {
-  var result = '';
+  var result = ''
   iterateMentionsMarkup(value, config, function (match, index, plainTextIndex, id, display) {
-    result += display;
+    result += display
   }, function (plainText) {
-    result += plainText;
-  });
-  return result;
-};
+    result += plainText
+  })
+  return result
+}
 
 // in the marked up value string.
 // If the passed character index lies inside a mention, the value of `inMarkupCorrection` defines the
@@ -139,138 +139,138 @@ var getPlainText = function getPlainText(value, config) {
 //   - 'NULL' to return null
 
 var mapPlainTextIndex = function mapPlainTextIndex(value, config, indexInPlainText) {
-  var inMarkupCorrection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'START';
+  var inMarkupCorrection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'START'
 
   if (typeof indexInPlainText !== 'number') {
-    return indexInPlainText;
+    return indexInPlainText
   }
 
-  var result;
+  var result
 
   var textIteratee = function textIteratee(substr, index, substrPlainTextIndex) {
-    if (result !== undefined) return;
+    if (result !== undefined) return
 
     if (substrPlainTextIndex + substr.length >= indexInPlainText) {
       // found the corresponding position in the current plain text range
-      result = index + indexInPlainText - substrPlainTextIndex;
+      result = index + indexInPlainText - substrPlainTextIndex
     }
-  };
+  }
 
   var markupIteratee = function markupIteratee(markup, index, mentionPlainTextIndex, id, display, childIndex, lastMentionEndIndex) {
-    if (result !== undefined) return;
+    if (result !== undefined) return
 
     if (mentionPlainTextIndex + display.length > indexInPlainText) {
       // found the corresponding position inside current match,
       // return the index of the first or after the last char of the matching markup
       // depending on whether the `inMarkupCorrection`
       if (inMarkupCorrection === 'NULL') {
-        result = null;
+        result = null
       } else {
-        result = index + (inMarkupCorrection === 'END' ? markup.length : 0);
+        result = index + (inMarkupCorrection === 'END' ? markup.length : 0)
       }
     }
-  };
+  }
 
-  iterateMentionsMarkup(value, config, markupIteratee, textIteratee); // when a mention is at the end of the value and we want to get the caret position
+  iterateMentionsMarkup(value, config, markupIteratee, textIteratee) // when a mention is at the end of the value and we want to get the caret position
   // at the end of the string, result is undefined
 
-  return result === undefined ? value.length : result;
-};
+  return result === undefined ? value.length : result
+}
 
 var spliceString = function spliceString(str, start, end, insert) {
-  return str.substring(0, start) + insert + str.substring(end);
-};
+  return str.substring(0, start) + insert + str.substring(end)
+}
 
 // guided by the textarea text selection ranges before and after the change
 
 var applyChangeToValue = function applyChangeToValue(value, plainTextValue, _ref, config) {
   var selectionStartBefore = _ref.selectionStartBefore,
-      selectionEndBefore = _ref.selectionEndBefore,
-      selectionEndAfter = _ref.selectionEndAfter;
-  var oldPlainTextValue = getPlainText(value, config);
-  var lengthDelta = oldPlainTextValue.length - plainTextValue.length;
+    selectionEndBefore = _ref.selectionEndBefore,
+    selectionEndAfter = _ref.selectionEndAfter
+  var oldPlainTextValue = getPlainText(value, config)
+  var lengthDelta = oldPlainTextValue.length - plainTextValue.length
 
   if (selectionStartBefore === 'undefined') {
-    selectionStartBefore = selectionEndAfter + lengthDelta;
+    selectionStartBefore = selectionEndAfter + lengthDelta
   }
 
   if (selectionEndBefore === 'undefined') {
-    selectionEndBefore = selectionStartBefore;
+    selectionEndBefore = selectionStartBefore
   } // Fixes an issue with replacing combined characters for complex input. Eg like acented letters on OSX
 
 
   if (selectionStartBefore === selectionEndBefore && selectionEndBefore === selectionEndAfter && oldPlainTextValue.length === plainTextValue.length) {
-    selectionStartBefore = selectionStartBefore - 1;
+    selectionStartBefore = selectionStartBefore - 1
   } // extract the insertion from the new plain text value
 
 
-  var insert = plainTextValue.slice(selectionStartBefore, selectionEndAfter); // handling for Backspace key with no range selection
+  var insert = plainTextValue.slice(selectionStartBefore, selectionEndAfter) // handling for Backspace key with no range selection
 
-  var spliceStart = Math.min(selectionStartBefore, selectionEndAfter);
-  var spliceEnd = selectionEndBefore;
+  var spliceStart = Math.min(selectionStartBefore, selectionEndAfter)
+  var spliceEnd = selectionEndBefore
 
   if (selectionStartBefore === selectionEndAfter) {
     // handling for Delete key with no range selection
-    spliceEnd = Math.max(selectionEndBefore, selectionStartBefore + lengthDelta);
+    spliceEnd = Math.max(selectionEndBefore, selectionStartBefore + lengthDelta)
   }
 
-  var mappedSpliceStart = mapPlainTextIndex(value, config, spliceStart, 'START');
-  var mappedSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, 'END');
-  var controlSpliceStart = mapPlainTextIndex(value, config, spliceStart, 'NULL');
-  var controlSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, 'NULL');
-  var willRemoveMention = controlSpliceStart === null || controlSpliceEnd === null;
-  var newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert);
+  var mappedSpliceStart = mapPlainTextIndex(value, config, spliceStart, 'START')
+  var mappedSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, 'END')
+  var controlSpliceStart = mapPlainTextIndex(value, config, spliceStart, 'NULL')
+  var controlSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, 'NULL')
+  var willRemoveMention = controlSpliceStart === null || controlSpliceEnd === null
+  var newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert)
 
   if (!willRemoveMention) {
     // test for auto-completion changes
-    var controlPlainTextValue = getPlainText(newValue, config);
+    var controlPlainTextValue = getPlainText(newValue, config)
 
     if (controlPlainTextValue !== plainTextValue) {
       // some auto-correction is going on
       // find start of diff
-      spliceStart = 0;
+      spliceStart = 0
 
       while (plainTextValue[spliceStart] === controlPlainTextValue[spliceStart]) {
-        spliceStart++;
+        spliceStart++
       } // extract auto-corrected insertion
 
 
-      insert = plainTextValue.slice(spliceStart, selectionEndAfter); // find index of the unchanged remainder
+      insert = plainTextValue.slice(spliceStart, selectionEndAfter) // find index of the unchanged remainder
 
-      spliceEnd = oldPlainTextValue.lastIndexOf(plainTextValue.substring(selectionEndAfter)); // re-map the corrected indices
+      spliceEnd = oldPlainTextValue.lastIndexOf(plainTextValue.substring(selectionEndAfter)) // re-map the corrected indices
 
-      mappedSpliceStart = mapPlainTextIndex(value, config, spliceStart, 'START');
-      mappedSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, 'END');
-      newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert);
+      mappedSpliceStart = mapPlainTextIndex(value, config, spliceStart, 'START')
+      mappedSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, 'END')
+      newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert)
     }
   }
 
-  return newValue;
-};
+  return newValue
+}
 
 // returns a the index of of the first char of the mention in the plain text.
 // If indexInPlainText does not lie inside a mention, returns indexInPlainText.
 
 var findStartOfMentionInPlainText = function findStartOfMentionInPlainText(value, config, indexInPlainText) {
-  var result = indexInPlainText;
-  var foundMention = false;
+  var result = indexInPlainText
+  var foundMention = false
 
   var markupIteratee = function markupIteratee(markup, index, mentionPlainTextIndex, id, display, childIndex, lastMentionEndIndex) {
     if (mentionPlainTextIndex <= indexInPlainText && mentionPlainTextIndex + display.length > indexInPlainText) {
-      result = mentionPlainTextIndex;
-      foundMention = true;
+      result = mentionPlainTextIndex
+      foundMention = true
     }
-  };
+  }
 
-  iterateMentionsMarkup(value, config, markupIteratee);
+  iterateMentionsMarkup(value, config, markupIteratee)
 
   if (foundMention) {
-    return result;
+    return result
   }
-};
+}
 
 var getMentions = function getMentions(value, config) {
-  var mentions = [];
+  var mentions = []
   iterateMentionsMarkup(value, config, function (match, index, plainTextIndex, id, display, childIndex, start) {
     mentions.push({
       id: id,
@@ -278,62 +278,62 @@ var getMentions = function getMentions(value, config) {
       childIndex: childIndex,
       index: index,
       plainTextIndex: plainTextIndex
-    });
-  });
-  return mentions;
-};
+    })
+  })
+  return mentions
+}
 
 var getSuggestionHtmlId = function getSuggestionHtmlId(prefix, id) {
-  return "".concat(prefix, "-").concat(id);
-};
+  return "".concat(prefix, "-").concat(id)
+}
 
 var countSuggestions = function countSuggestions(suggestions) {
   return Object.values(suggestions).reduce(function (acc, _ref) {
-    var results = _ref.results;
-    return acc + results.length;
-  }, 0);
-};
+    var results = _ref.results
+    return acc + results.length
+  }, 0)
+}
 
 var getEndOfLastMention = function getEndOfLastMention(value, config) {
-  var mentions = getMentions(value, config);
-  var lastMention = mentions[mentions.length - 1];
-  return lastMention ? lastMention.plainTextIndex + lastMention.display.length : 0;
-};
+  var mentions = getMentions(value, config)
+  var lastMention = mentions[mentions.length - 1]
+  return lastMention ? lastMention.plainTextIndex + lastMention.display.length : 0
+}
 
 var markupToRegex = function markupToRegex(markup) {
-  var escapedMarkup = escapeRegex(markup);
-  var charAfterDisplay = markup[markup.indexOf(PLACEHOLDERS.display) + PLACEHOLDERS.display.length];
-  var charAfterId = markup[markup.indexOf(PLACEHOLDERS.id) + PLACEHOLDERS.id.length];
-  return new RegExp(escapedMarkup.replace(PLACEHOLDERS.display, "([^".concat(escapeRegex(charAfterDisplay || ''), "]+?)")).replace(PLACEHOLDERS.id, "([^".concat(escapeRegex(charAfterId || ''), "]+?)")));
-};
+  var escapedMarkup = escapeRegex(markup)
+  var charAfterDisplay = markup[markup.indexOf(PLACEHOLDERS.display) + PLACEHOLDERS.display.length]
+  var charAfterId = markup[markup.indexOf(PLACEHOLDERS.id) + PLACEHOLDERS.id.length]
+  return new RegExp(escapedMarkup.replace(PLACEHOLDERS.display, "([^".concat(escapeRegex(charAfterDisplay || ''), "]+?)")).replace(PLACEHOLDERS.id, "([^".concat(escapeRegex(charAfterId || ''), "]+?)")))
+}
 
 var readConfigFromChildren = function readConfigFromChildren(children) {
   return React.Children.toArray(children).map(function (_ref) {
     var _ref$props = _ref.props,
-        markup = _ref$props.markup,
-        regex = _ref$props.regex,
-        displayTransform = _ref$props.displayTransform;
+      markup = _ref$props.markup,
+      regex = _ref$props.regex,
+      displayTransform = _ref$props.displayTransform
     return {
       markup: markup,
       regex: regex ? coerceCapturingGroups(regex, markup) : markupToRegex(markup),
       displayTransform: displayTransform || function (id, display) {
-        return display || id;
+        return display || id
       }
-    };
-  });
-}; // make sure that the custom regex defines the correct number of capturing groups
+    }
+  })
+} // make sure that the custom regex defines the correct number of capturing groups
 
 
 var coerceCapturingGroups = function coerceCapturingGroups(regex, markup) {
-  var numberOfGroups = new RegExp(regex.toString() + '|').exec('').length - 1;
-  var numberOfPlaceholders = countPlaceholders(markup);
-  invariant(numberOfGroups === numberOfPlaceholders, "Number of capturing groups in RegExp ".concat(regex.toString(), " (").concat(numberOfGroups, ") does not match the number of placeholders in the markup '").concat(markup, "' (").concat(numberOfPlaceholders, ")"));
-  return regex;
-};
+  var numberOfGroups = new RegExp(regex.toString() + '|').exec('').length - 1
+  var numberOfPlaceholders = countPlaceholders(markup)
+  invariant(numberOfGroups === numberOfPlaceholders, "Number of capturing groups in RegExp ".concat(regex.toString(), " (").concat(numberOfGroups, ") does not match the number of placeholders in the markup '").concat(markup, "' (").concat(numberOfPlaceholders, ")"))
+  return regex
+}
 
 var makeMentionsMarkup = function makeMentionsMarkup(markup, id, display) {
-  return markup.replace(PLACEHOLDERS.id, id).replace(PLACEHOLDERS.display, display);
-};
+  return markup.replace(PLACEHOLDERS.id, id).replace(PLACEHOLDERS.display, display)
+}
 
 // This contains all the latin letters and the regex that match these letters with diacritics
 // https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
@@ -607,223 +607,223 @@ var lettersDiacritics = [{
 }, {
   base: 'z',
   letters: /(&#122;|&#9449;|&#65370;|&#378;|&#7825;|&#380;|&#382;|&#7827;|&#7829;|&#438;|&#549;|&#576;|&#11372;|&#42851;|[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763])/g
-}];
+}]
 
 var removeAccents = function removeAccents(str) {
-  var formattedStr = str;
+  var formattedStr = str
   lettersDiacritics.forEach(function (letterDiacritics) {
-    formattedStr = formattedStr.replace(letterDiacritics.letters, letterDiacritics.base);
-  });
-  return formattedStr;
-};
+    formattedStr = formattedStr.replace(letterDiacritics.letters, letterDiacritics.base)
+  })
+  return formattedStr
+}
 
 var normalizeString = function normalizeString(str) {
-  return removeAccents(str).toLowerCase();
-};
+  return removeAccents(str).toLowerCase()
+}
 
 var getSubstringIndex = function getSubstringIndex(str, substr, ignoreAccents) {
   if (!ignoreAccents) {
-    return str.toLowerCase().indexOf(substr.toLowerCase());
+    return str.toLowerCase().indexOf(substr.toLowerCase())
   }
 
-  return normalizeString(str).indexOf(normalizeString(substr));
-};
+  return normalizeString(str).indexOf(normalizeString(substr))
+}
 
 var isIE = function isIE() {
-  return !!document.documentMode;
-};
+  return !!document.documentMode
+}
 
 var isNumber = function isNumber(val) {
-  return typeof val === 'number';
-};
+  return typeof val === 'number'
+}
 
 var keys = function keys(obj) {
-  return obj === Object(obj) ? Object.keys(obj) : [];
-};
+  return obj === Object(obj) ? Object.keys(obj) : []
+}
 
 var omit = function omit(obj) {
-  var _ref;
+  var _ref
 
   for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
-    rest[_key - 1] = arguments[_key];
+    rest[_key - 1] = arguments[_key]
   }
 
-  var keys = (_ref = []).concat.apply(_ref, rest);
+  var keys = (_ref = []).concat.apply(_ref, rest)
 
   return Object.keys(obj).reduce(function (acc, k) {
     if (obj.hasOwnProperty(k) && !keys.includes(k) && obj[k] !== undefined) {
-      acc[k] = obj[k];
+      acc[k] = obj[k]
     }
 
-    return acc;
-  }, {});
-};
+    return acc
+  }, {})
+}
 
-var _excluded = ["style", "className", "classNames"];
+var _excluded = ["style", "className", "classNames"]
 
-function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
+function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable })), keys.push.apply(keys, symbols) } return keys }
 
-function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
+function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)) }) } return target }
 
 function createDefaultStyle(defaultStyle, getModifiers) {
   var enhance = function enhance(ComponentToWrap) {
     var DefaultStyleEnhancer = function DefaultStyleEnhancer(_ref) {
       var style = _ref.style,
-          className = _ref.className,
-          classNames = _ref.classNames,
-          rest = _objectWithoutProperties(_ref, _excluded);
+        className = _ref.className,
+        classNames = _ref.classNames,
+        rest = _objectWithoutProperties(_ref, _excluded)
 
-      var modifiers = getModifiers ? getModifiers(rest) : undefined;
+      var modifiers = getModifiers ? getModifiers(rest) : undefined
       var styles = useStyles__default(defaultStyle, {
         style: style,
         className: className,
         classNames: classNames
-      }, modifiers);
+      }, modifiers)
       return /*#__PURE__*/React__default.createElement(ComponentToWrap, _extends({}, rest, {
         style: styles
-      }));
-    };
+      }))
+    }
 
-    var displayName = ComponentToWrap.displayName || ComponentToWrap.name || 'Component';
-    DefaultStyleEnhancer.displayName = "defaultStyle(".concat(displayName, ")"); // return DefaultStyleEnhancer
+    var displayName = ComponentToWrap.displayName || ComponentToWrap.name || 'Component'
+    DefaultStyleEnhancer.displayName = "defaultStyle(".concat(displayName, ")") // return DefaultStyleEnhancer
 
     return /*#__PURE__*/React__default.forwardRef(function (props, ref) {
       return DefaultStyleEnhancer(_objectSpread(_objectSpread({}, props), {}, {
         ref: ref
-      }));
-    });
-  };
+      }))
+    })
+  }
 
-  return enhance;
+  return enhance
 }
 
 var _generateComponentKey = function _generateComponentKey(usedKeys, id) {
   if (!usedKeys.hasOwnProperty(id)) {
-    usedKeys[id] = 0;
+    usedKeys[id] = 0
   } else {
-    usedKeys[id]++;
+    usedKeys[id]++
   }
 
-  return id + '_' + usedKeys[id];
-};
+  return id + '_' + usedKeys[id]
+}
 
 function Highlighter(_ref) {
   var selectionStart = _ref.selectionStart,
-      selectionEnd = _ref.selectionEnd,
-      _ref$value = _ref.value,
-      value = _ref$value === void 0 ? '' : _ref$value,
-      onCaretPositionChange = _ref.onCaretPositionChange,
-      containerRef = _ref.containerRef,
-      children = _ref.children,
-      singleLine = _ref.singleLine,
-      style = _ref.style;
+    selectionEnd = _ref.selectionEnd,
+    _ref$value = _ref.value,
+    value = _ref$value === void 0 ? '' : _ref$value,
+    onCaretPositionChange = _ref.onCaretPositionChange,
+    containerRef = _ref.containerRef,
+    children = _ref.children,
+    singleLine = _ref.singleLine,
+    style = _ref.style
 
   var _useState = React.useState({
     left: undefined,
     top: undefined
   }),
-      _useState2 = _slicedToArray(_useState, 2),
-      position = _useState2[0],
-      setPosition = _useState2[1];
+    _useState2 = _slicedToArray(_useState, 2),
+    position = _useState2[0],
+    setPosition = _useState2[1]
 
   var _useState3 = React.useState(),
-      _useState4 = _slicedToArray(_useState3, 2),
-      caretElement = _useState4[0],
-      setCaretElement = _useState4[1];
+    _useState4 = _slicedToArray(_useState3, 2),
+    caretElement = _useState4[0],
+    setCaretElement = _useState4[1]
 
   React.useEffect(function () {
-    notifyCaretPosition();
-  });
+    notifyCaretPosition()
+  })
 
   var notifyCaretPosition = function notifyCaretPosition() {
     if (!caretElement) {
-      return;
+      return
     }
 
     var offsetLeft = caretElement.offsetLeft,
-        offsetTop = caretElement.offsetTop;
+      offsetTop = caretElement.offsetTop
 
     if (position.left === offsetLeft && position.top === offsetTop) {
-      return;
+      return
     }
 
     var newPosition = {
       left: offsetLeft,
       top: offsetTop
-    };
-    setPosition(newPosition);
-    onCaretPositionChange(newPosition);
-  };
+    }
+    setPosition(newPosition)
+    onCaretPositionChange(newPosition)
+  }
 
-  var config = readConfigFromChildren(children);
-  var caretPositionInMarkup;
+  var config = readConfigFromChildren(children)
+  var caretPositionInMarkup
 
   if (selectionEnd === selectionStart) {
-    caretPositionInMarkup = mapPlainTextIndex(value, config, selectionStart, 'START');
+    caretPositionInMarkup = mapPlainTextIndex(value, config, selectionStart, 'START')
   }
 
-  var resultComponents = [];
-  var componentKeys = {};
-  var components = resultComponents;
-  var substringComponentKey = 0;
+  var resultComponents = []
+  var componentKeys = {}
+  var components = resultComponents
+  var substringComponentKey = 0
 
   var textIteratee = function textIteratee(substr, index, indexInPlainText) {
     // check whether the caret element has to be inserted inside the current plain substring
     if (isNumber(caretPositionInMarkup) && caretPositionInMarkup >= index && caretPositionInMarkup <= index + substr.length) {
       // if yes, split substr at the caret position and insert the caret component
-      var splitIndex = caretPositionInMarkup - index;
-      components.push(renderSubstring(substr.substring(0, splitIndex), substringComponentKey)); // add all following substrings and mention components as children of the caret component
+      var splitIndex = caretPositionInMarkup - index
+      components.push(renderSubstring(substr.substring(0, splitIndex), substringComponentKey)) // add all following substrings and mention components as children of the caret component
 
-      components = [renderSubstring(substr.substring(splitIndex), substringComponentKey)];
+      components = [renderSubstring(substr.substring(splitIndex), substringComponentKey)]
     } else {
-      components.push(renderSubstring(substr, substringComponentKey));
+      components.push(renderSubstring(substr, substringComponentKey))
     }
 
-    substringComponentKey++;
-  };
+    substringComponentKey++
+  }
 
   var mentionIteratee = function mentionIteratee(markup, index, indexInPlainText, id, display, mentionChildIndex, lastMentionEndIndex) {
-    var key = _generateComponentKey(componentKeys, id);
+    var key = _generateComponentKey(componentKeys, id)
 
-    components.push(getMentionComponentForMatch(id, display, mentionChildIndex, key));
-  };
+    components.push(getMentionComponentForMatch(id, display, mentionChildIndex, key))
+  }
 
   var renderSubstring = function renderSubstring(string, key) {
     // set substring span to hidden, so that Emojis are not shown double in Mobile Safari
     return /*#__PURE__*/React__default.createElement("span", _extends({}, style('substring'), {
       key: key
-    }), string);
-  };
+    }), string)
+  }
 
   var getMentionComponentForMatch = function getMentionComponentForMatch(id, display, mentionChildIndex, key) {
     var props = {
       id: id,
       display: display,
       key: key
-    };
-    var child = React.Children.toArray(children)[mentionChildIndex];
-    return /*#__PURE__*/React__default.cloneElement(child, props);
-  };
+    }
+    var child = React.Children.toArray(children)[mentionChildIndex]
+    return /*#__PURE__*/React__default.cloneElement(child, props)
+  }
 
   var renderHighlighterCaret = function renderHighlighterCaret(children) {
     return /*#__PURE__*/React__default.createElement("span", _extends({}, style('caret'), {
       ref: setCaretElement,
       key: "caret"
-    }), children);
-  };
+    }), children)
+  }
 
-  iterateMentionsMarkup(value, config, mentionIteratee, textIteratee); // append a span containing a space, to ensure the last text line has the correct height
+  iterateMentionsMarkup(value, config, mentionIteratee, textIteratee) // append a span containing a space, to ensure the last text line has the correct height
 
-  components.push(' ');
+  components.push(' ')
 
   if (components !== resultComponents) {
     // if a caret component is to be rendered, add all components that followed as its children
-    resultComponents.push(renderHighlighterCaret(components));
+    resultComponents.push(renderHighlighterCaret(components))
   }
 
   return /*#__PURE__*/React__default.createElement("div", _extends({}, style, {
     ref: containerRef
-  }), resultComponents);
+  }), resultComponents)
 }
 
 Highlighter.propTypes = {
@@ -835,7 +835,7 @@ Highlighter.propTypes = {
     current: typeof Element === 'undefined' ? PropTypes.any : PropTypes.instanceOf(Element)
   })]),
   children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]).isRequired
-};
+}
 var styled = createDefaultStyle({
   position: 'relative',
   boxSizing: 'border-box',
@@ -856,69 +856,69 @@ var styled = createDefaultStyle({
 }, function (props) {
   return {
     '&singleLine': props.singleLine
-  };
-});
-var Highlighter$1 = styled(Highlighter);
+  }
+})
+var Highlighter$1 = styled(Highlighter)
 
 function Suggestion(_ref) {
   var id = _ref.id,
-      focused = _ref.focused,
-      ignoreAccents = _ref.ignoreAccents,
-      index = _ref.index,
-      onClick = _ref.onClick,
-      onMouseEnter = _ref.onMouseEnter,
-      query = _ref.query,
-      renderSuggestion = _ref.renderSuggestion,
-      suggestion = _ref.suggestion,
-      style = _ref.style,
-      className = _ref.className,
-      classNames = _ref.classNames;
+    focused = _ref.focused,
+    ignoreAccents = _ref.ignoreAccents,
+    index = _ref.index,
+    onClick = _ref.onClick,
+    onMouseEnter = _ref.onMouseEnter,
+    query = _ref.query,
+    renderSuggestion = _ref.renderSuggestion,
+    suggestion = _ref.suggestion,
+    style = _ref.style,
+    className = _ref.className,
+    classNames = _ref.classNames
   var rest = {
     onClick: onClick,
     onMouseEnter: onMouseEnter
-  };
+  }
 
   var renderContent = function renderContent() {
-    var display = getDisplay();
-    var highlightedDisplay = renderHighlightedDisplay(display);
+    var display = getDisplay()
+    var highlightedDisplay = renderHighlightedDisplay(display)
 
     if (renderSuggestion) {
-      return renderSuggestion(suggestion, query, highlightedDisplay, index, focused);
+      return renderSuggestion(suggestion, query, highlightedDisplay, index, focused)
     }
 
-    return highlightedDisplay;
-  };
+    return highlightedDisplay
+  }
 
   var getDisplay = function getDisplay() {
     if (typeof suggestion === 'string') {
-      return suggestion;
+      return suggestion
     }
 
     var id = suggestion.id,
-        display = suggestion.display;
+      display = suggestion.display
 
     if (id === undefined || !display) {
-      return id;
+      return id
     }
 
-    return display;
-  };
+    return display
+  }
 
   var renderHighlightedDisplay = function renderHighlightedDisplay(display) {
-    var i = getSubstringIndex(display, query, ignoreAccents);
+    var i = getSubstringIndex(display, query, ignoreAccents)
 
     if (i === -1) {
-      return /*#__PURE__*/React__default.createElement("span", style('display'), display);
+      return /*#__PURE__*/React__default.createElement("span", style('display'), display)
     }
 
-    return /*#__PURE__*/React__default.createElement("span", style('display'), display.substring(0, i), /*#__PURE__*/React__default.createElement("b", style('highlight'), display.substring(i, i + query.length)), display.substring(i + query.length));
-  };
+    return /*#__PURE__*/React__default.createElement("span", style('display'), display.substring(0, i), /*#__PURE__*/React__default.createElement("b", style('highlight'), display.substring(i, i + query.length)), display.substring(i + query.length))
+  }
 
   return /*#__PURE__*/React__default.createElement("li", _extends({
     id: id,
     role: "option",
     "aria-selected": focused
-  }, rest, style), renderContent());
+  }, rest, style), renderContent())
 }
 
 Suggestion.propTypes = {
@@ -932,84 +932,84 @@ Suggestion.propTypes = {
   })]).isRequired,
   renderSuggestion: PropTypes.func,
   focused: PropTypes.bool
-};
+}
 var styled$1 = createDefaultStyle({
   cursor: 'pointer'
 }, function (props) {
   return {
     '&focused': props.focused
-  };
-});
-var Suggestion$1 = styled$1(Suggestion);
+  }
+})
+var Suggestion$1 = styled$1(Suggestion)
 
 function LoadingIndicator(_ref) {
   var style = _ref.style,
-      className = _ref.className,
-      classNames = _ref.classNames;
+    className = _ref.className,
+    classNames = _ref.classNames
   var styles = useStyles__default(defaultstyle, {
     style: style,
     className: className,
     classNames: classNames
-  });
-  var spinnerStyles = styles('spinner');
-  return /*#__PURE__*/React__default.createElement("div", styles, /*#__PURE__*/React__default.createElement("div", spinnerStyles, /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element1'])), /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element2'])), /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element3'])), /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element4'])), /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element5']))));
+  })
+  var spinnerStyles = styles('spinner')
+  return /*#__PURE__*/React__default.createElement("div", styles, /*#__PURE__*/React__default.createElement("div", spinnerStyles, /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element1'])), /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element2'])), /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element3'])), /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element4'])), /*#__PURE__*/React__default.createElement("div", spinnerStyles(['element', 'element5']))))
 }
 
-var defaultstyle = {};
+var defaultstyle = {}
 
 function SuggestionsOverlay(_ref) {
   var id = _ref.id,
-      _ref$suggestions = _ref.suggestions,
-      suggestions = _ref$suggestions === void 0 ? {} : _ref$suggestions,
-      a11ySuggestionsListLabel = _ref.a11ySuggestionsListLabel,
-      focusIndex = _ref.focusIndex,
-      position = _ref.position,
-      left = _ref.left,
-      right = _ref.right,
-      top = _ref.top,
-      scrollFocusedIntoView = _ref.scrollFocusedIntoView,
-      isLoading = _ref.isLoading,
-      isOpened = _ref.isOpened,
-      _ref$onSelect = _ref.onSelect,
-      onSelect = _ref$onSelect === void 0 ? function () {
-    return null;
-  } : _ref$onSelect,
-      ignoreAccents = _ref.ignoreAccents,
-      containerRef = _ref.containerRef,
-      children = _ref.children,
-      style = _ref.style,
-      customSuggestionsContainer = _ref.customSuggestionsContainer,
-      onMouseDown = _ref.onMouseDown,
-      onMouseEnter = _ref.onMouseEnter;
+    _ref$suggestions = _ref.suggestions,
+    suggestions = _ref$suggestions === void 0 ? {} : _ref$suggestions,
+    a11ySuggestionsListLabel = _ref.a11ySuggestionsListLabel,
+    focusIndex = _ref.focusIndex,
+    position = _ref.position,
+    left = _ref.left,
+    right = _ref.right,
+    top = _ref.top,
+    scrollFocusedIntoView = _ref.scrollFocusedIntoView,
+    isLoading = _ref.isLoading,
+    isOpened = _ref.isOpened,
+    _ref$onSelect = _ref.onSelect,
+    onSelect = _ref$onSelect === void 0 ? function () {
+      return null
+    } : _ref$onSelect,
+    ignoreAccents = _ref.ignoreAccents,
+    containerRef = _ref.containerRef,
+    children = _ref.children,
+    style = _ref.style,
+    customSuggestionsContainer = _ref.customSuggestionsContainer,
+    onMouseDown = _ref.onMouseDown,
+    onMouseEnter = _ref.onMouseEnter
 
   var _useState = React.useState(undefined),
-      _useState2 = _slicedToArray(_useState, 2),
-      ulElement = _useState2[0],
-      setUlElement = _useState2[1];
+    _useState2 = _slicedToArray(_useState, 2),
+    ulElement = _useState2[0],
+    setUlElement = _useState2[1]
 
   React.useEffect(function () {
     if (!ulElement || ulElement.offsetHeight >= ulElement.scrollHeight || !scrollFocusedIntoView) {
-      return;
+      return
     }
 
-    var scrollTop = ulElement.scrollTop;
+    var scrollTop = ulElement.scrollTop
 
     var _ulElement$children$f = ulElement.children[focusIndex].getBoundingClientRect(),
-        top = _ulElement$children$f.top,
-        bottom = _ulElement$children$f.bottom;
+      top = _ulElement$children$f.top,
+      bottom = _ulElement$children$f.bottom
 
     var _ulElement$getBoundin = ulElement.getBoundingClientRect(),
-        topContainer = _ulElement$getBoundin.top;
+      topContainer = _ulElement$getBoundin.top
 
-    top = top - topContainer + scrollTop;
-    bottom = bottom - topContainer + scrollTop;
+    top = top - topContainer + scrollTop
+    bottom = bottom - topContainer + scrollTop
 
     if (top < scrollTop) {
-      ulElement.scrollTop = top;
+      ulElement.scrollTop = top
     } else if (bottom > ulElement.offsetHeight) {
-      ulElement.scrollTop = bottom - ulElement.offsetHeight;
+      ulElement.scrollTop = bottom - ulElement.offsetHeight
     }
-  }, [focusIndex, scrollFocusedIntoView, ulElement]);
+  }, [focusIndex, scrollFocusedIntoView, ulElement])
 
   var renderSuggestions = function renderSuggestions() {
     var suggestionsToRender = /*#__PURE__*/React__default.createElement("ul", _extends({
@@ -1019,20 +1019,20 @@ function SuggestionsOverlay(_ref) {
       "aria-label": a11ySuggestionsListLabel
     }, style('list')), Object.values(suggestions).reduce(function (accResults, _ref2) {
       var results = _ref2.results,
-          queryInfo = _ref2.queryInfo;
+        queryInfo = _ref2.queryInfo
       return [].concat(_toConsumableArray(accResults), _toConsumableArray(results.map(function (result, index) {
-        return renderSuggestion(result, queryInfo, accResults.length + index);
-      })));
-    }, []));
-    if (customSuggestionsContainer) return customSuggestionsContainer(suggestionsToRender);
-    return suggestionsToRender;
-  };
+        return renderSuggestion(result, queryInfo, accResults.length + index)
+      })))
+    }, []))
+    if (customSuggestionsContainer) return customSuggestionsContainer(suggestionsToRender)
+    return suggestionsToRender
+  }
 
   var renderSuggestion = function renderSuggestion(result, queryInfo, index) {
-    var isFocused = index === focusIndex;
+    var isFocused = index === focusIndex
     var childIndex = queryInfo.childIndex,
-        query = queryInfo.query;
-    var renderSuggestion = React.Children.toArray(children)[childIndex].props.renderSuggestion;
+      query = queryInfo.query
+    var renderSuggestion = React.Children.toArray(children)[childIndex].props.renderSuggestion
     return /*#__PURE__*/React__default.createElement(Suggestion$1, {
       style: style('item'),
       key: "".concat(childIndex, "-").concat(getID(result)),
@@ -1044,44 +1044,44 @@ function SuggestionsOverlay(_ref) {
       suggestion: result,
       focused: isFocused,
       onClick: function onClick() {
-        return select(result, queryInfo);
+        return select(result, queryInfo)
       },
       onMouseEnter: function onMouseEnter() {
-        return handleMouseEnter(index);
+        return handleMouseEnter(index)
       }
-    });
-  };
+    })
+  }
 
   var renderLoadingIndicator = function renderLoadingIndicator() {
     if (!isLoading) {
-      return;
+      return
     }
 
     return /*#__PURE__*/React__default.createElement(LoadingIndicator, {
       style: style('loadingIndicator')
-    });
-  };
+    })
+  }
 
   var handleMouseEnter = function handleMouseEnter(index, ev) {
     if (onMouseEnter) {
-      onMouseEnter(index);
+      onMouseEnter(index)
     }
-  };
+  }
 
   var select = function select(suggestion, queryInfo) {
-    onSelect(suggestion, queryInfo);
-  };
+    onSelect(suggestion, queryInfo)
+  }
 
   var getID = function getID(suggestion) {
     if (typeof suggestion === 'string') {
-      return suggestion;
+      return suggestion
     }
 
-    return suggestion.id;
-  };
+    return suggestion.id
+  }
 
   if (!isOpened) {
-    return null;
+    return null
   }
 
   return /*#__PURE__*/React__default.createElement("div", _extends({}, useStyles.inline({
@@ -1092,7 +1092,7 @@ function SuggestionsOverlay(_ref) {
   }, style), {
     onMouseDown: onMouseDown,
     ref: containerRef
-  }), renderSuggestions(), renderLoadingIndicator());
+  }), renderSuggestions(), renderLoadingIndicator())
 }
 
 SuggestionsOverlay.propTypes = {
@@ -1113,7 +1113,7 @@ SuggestionsOverlay.propTypes = {
   containerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
     current: typeof Element === 'undefined' ? PropTypes.any : PropTypes.instanceOf(Element)
   })])
-};
+}
 var styled$2 = createDefaultStyle({
   zIndex: 1,
   backgroundColor: 'white',
@@ -1124,51 +1124,51 @@ var styled$2 = createDefaultStyle({
     padding: 0,
     listStyleType: 'none'
   }
-});
-var SuggestionsOverlay$1 = styled$2(SuggestionsOverlay);
+})
+var SuggestionsOverlay$1 = styled$2(SuggestionsOverlay)
 
-function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
+function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable })), keys.push.apply(keys, symbols) } return keys }
 
-function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
+function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]) }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)) }) } return target }
 
-function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
+function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget) } else { result = Super.apply(this, arguments) } return _possibleConstructorReturn(this, result) } }
 
-function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
+function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { })); return true } catch (e) { return false } }
 var makeTriggerRegex = function makeTriggerRegex(trigger) {
-  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
+  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}
 
   if (trigger instanceof RegExp) {
-    return trigger;
+    return trigger
   } else {
-    var allowSpaceInQuery = options.allowSpaceInQuery;
-    var escapedTriggerChar = escapeRegex(trigger); // first capture group is the part to be replaced on completion
+    var allowSpaceInQuery = options.allowSpaceInQuery
+    var escapedTriggerChar = escapeRegex(trigger) // first capture group is the part to be replaced on completion
     // second capture group is for extracting the search query
 
-    return new RegExp("(?:^|\\s)(".concat(escapedTriggerChar, "([^").concat(allowSpaceInQuery ? '' : '\\s').concat(escapedTriggerChar, "]*))$"));
+    return new RegExp("(?:^|\\s)(".concat(escapedTriggerChar, "([^").concat(allowSpaceInQuery ? '' : '\\s').concat(escapedTriggerChar, "]*))$"))
   }
-};
+}
 
 var getDataProvider = function getDataProvider(data, ignoreAccents) {
   if (data instanceof Array) {
     // if data is an array, create a function to query that
     return function (query, callback) {
-      var results = [];
+      var results = []
 
       for (var i = 0, l = data.length; i < l; ++i) {
-        var display = data[i].display || data[i].id;
+        var display = data[i].display || data[i].id
 
         if (getSubstringIndex(display, query, ignoreAccents) >= 0) {
-          results.push(data[i]);
+          results.push(data[i])
         }
       }
 
-      return results;
-    };
+      return results
+    }
   } else {
     // expect data to be a query function
-    return data;
+    return data
   }
-};
+}
 
 var KEY = {
   TAB: 9,
@@ -1176,8 +1176,8 @@ var KEY = {
   ESC: 27,
   UP: 38,
   DOWN: 40
-};
-var isComposing = false;
+}
+var isComposing = false
 var propTypes = {
   /**
    * If set to `true` a regular text input element will be rendered
@@ -1200,32 +1200,32 @@ var propTypes = {
     current: typeof Element === 'undefined' ? PropTypes.any : PropTypes.instanceOf(Element)
   })]),
   children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]).isRequired
-};
+}
 
 var MentionsInput = /*#__PURE__*/function (_React$Component) {
-  _inherits(MentionsInput, _React$Component);
+  _inherits(MentionsInput, _React$Component)
 
-  var _super = _createSuper(MentionsInput);
+  var _super = _createSuper(MentionsInput)
 
   function MentionsInput(_props) {
-    var _this;
+    var _this
 
-    _classCallCheck(this, MentionsInput);
+    _classCallCheck(this, MentionsInput)
 
-    _this = _super.call(this, _props);
+    _this = _super.call(this, _props)
 
     _defineProperty(_assertThisInitialized(_this), "setContainerElement", function (el) {
-      _this.containerElement = el;
-    });
+      _this.containerElement = el
+    })
 
     _defineProperty(_assertThisInitialized(_this), "getInputProps", function () {
       var _this$props = _this.props,
-          readOnly = _this$props.readOnly,
-          disabled = _this$props.disabled,
-          style = _this$props.style; // pass all props that neither we, nor substyle, consume through to the input control
+        readOnly = _this$props.readOnly,
+        disabled = _this$props.disabled,
+        style = _this$props.style // pass all props that neither we, nor substyle, consume through to the input control
 
       var props = omit(_this.props, ['style', 'classNames', 'className'], // substyle props
-      keys(propTypes));
+        keys(propTypes))
       return _objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1({}, props), style('input')), {}, {
         value: _this.getPlainText(),
         onScroll: _this.updateHighlighterScroll
@@ -1243,58 +1243,58 @@ var MentionsInput = /*#__PURE__*/function (_React$Component) {
         'aria-autocomplete': 'list',
         'aria-haspopup': 'listbox',
         'aria-activedescendant': getSuggestionHtmlId(_this.uuidSuggestionsOverlay, _this.state.focusIndex)
-      });
-    });
+      })
+    })
 
     _defineProperty(_assertThisInitialized(_this), "renderControl", function () {
       var _this$props2 = _this.props,
-          singleLine = _this$props2.singleLine,
-          style = _this$props2.style;
+        singleLine = _this$props2.singleLine,
+        style = _this$props2.style
 
-      var inputProps = _this.getInputProps();
+      var inputProps = _this.getInputProps()
 
-      return /*#__PURE__*/React__default.createElement("div", style('control'), _this.renderHighlighter(), singleLine ? _this.renderInput(inputProps) : _this.renderTextarea(inputProps));
-    });
+      return /*#__PURE__*/React__default.createElement("div", style('control'), _this.renderHighlighter(), singleLine ? _this.renderInput(inputProps) : _this.renderTextarea(inputProps))
+    })
 
     _defineProperty(_assertThisInitialized(_this), "renderInput", function (props) {
       return /*#__PURE__*/React__default.createElement("input", _extends({
         type: "text",
         ref: _this.setInputRef
-      }, props));
-    });
+      }, props))
+    })
 
     _defineProperty(_assertThisInitialized(_this), "renderTextarea", function (props) {
       return /*#__PURE__*/React__default.createElement("textarea", _extends({
         ref: _this.setInputRef
-      }, props));
-    });
+      }, props))
+    })
 
     _defineProperty(_assertThisInitialized(_this), "setInputRef", function (el) {
-      _this.inputElement = el;
-      var inputRef = _this.props.inputRef;
+      _this.inputElement = el
+      var inputRef = _this.props.inputRef
 
       if (typeof inputRef === 'function') {
-        inputRef(el);
+        inputRef(el)
       } else if (inputRef) {
-        inputRef.current = el;
+        inputRef.current = el
       }
-    });
+    })
 
     _defineProperty(_assertThisInitialized(_this), "setSuggestionsElement", function (el) {
-      _this.suggestionsElement = el;
-    });
+      _this.suggestionsElement = el
+    })
 
     _defineProperty(_assertThisInitialized(_this), "renderSuggestionsOverlay", function () {
       if (!isNumber(_this.state.selectionStart)) {
         // do not show suggestions when the input does not have the focus
-        return null;
+        return null
       }
 
       var _this$state$suggestio = _this.state.suggestionsPosition,
-          position = _this$state$suggestio.position,
-          left = _this$state$suggestio.left,
-          top = _this$state$suggestio.top,
-          right = _this$state$suggestio.right;
+        position = _this$state$suggestio.position,
+        left = _this$state$suggestio.left,
+        top = _this$state$suggestio.top,
+        right = _this$state$suggestio.right
       var suggestionsNode = /*#__PURE__*/React__default.createElement(SuggestionsOverlay$1, {
         id: _this.uuidSuggestionsOverlay,
         style: _this.props.style('suggestions'),
@@ -1314,24 +1314,24 @@ var MentionsInput = /*#__PURE__*/function (_React$Component) {
         isOpened: _this.isOpened(),
         ignoreAccents: _this.props.ignoreAccents,
         a11ySuggestionsListLabel: _this.props.a11ySuggestionsListLabel
-      }, _this.props.children);
+      }, _this.props.children)
 
       if (_this.props.suggestionsPortalHost) {
-        return /*#__PURE__*/ReactDOM.createPortal(suggestionsNode, _this.props.suggestionsPortalHost);
+        return /*#__PURE__*/ReactDOM.createPortal(suggestionsNode, _this.props.suggestionsPortalHost)
       } else {
-        return suggestionsNode;
+        return suggestionsNode
       }
-    });
+    })
 
     _defineProperty(_assertThisInitialized(_this), "renderHighlighter", function () {
       var _this$state = _this.state,
-          selectionStart = _this$state.selectionStart,
-          selectionEnd = _this$state.selectionEnd;
+        selectionStart = _this$state.selectionStart,
+        selectionEnd = _this$state.selectionEnd
       var _this$props3 = _this.props,
-          singleLine = _this$props3.singleLine,
-          children = _this$props3.children,
-          value = _this$props3.value,
-          style = _this$props3.style;
+        singleLine = _this$props3.singleLine,
+        children = _this$props3.children,
+        value = _this$props3.value,
+        style = _this$props3.style
       return /*#__PURE__*/React__default.createElement(Highlighter$1, {
         containerRef: _this.setHighlighterElement,
         style: style('highlighter'),
@@ -1340,67 +1340,67 @@ var MentionsInput = /*#__PURE__*/function (_React$Component) {
         selectionStart: selectionStart,
         selectionEnd: selectionEnd,
         onCaretPositionChange: _this.handleCaretPositionChange
-      }, children);
-    });
+      }, children)
+    })
 
     _defineProperty(_assertThisInitialized(_this), "setHighlighterElement", function (el) {
-      _this.highlighterElement = el;
-    });
+      _this.highlighterElement = el
+    })
 
     _defineProperty(_assertThisInitialized(_this), "handleCaretPositionChange", function (position) {
       _this.setState({
         caretPosition: position
-      });
-    });
+      })
+    })
 
     _defineProperty(_assertThisInitialized(_this), "getPlainText", function () {
-      return getPlainText(_this.props.value || '', readConfigFromChildren(_this.props.children));
-    });
+      return getPlainText(_this.props.value || '', readConfigFromChildren(_this.props.children))
+    })
 
     _defineProperty(_assertThisInitialized(_this), "executeOnChange", function (event) {
       for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
-        args[_key - 1] = arguments[_key];
+        args[_key - 1] = arguments[_key]
       }
 
       if (_this.props.onChange) {
-        var _this$props4;
+        var _this$props4
 
-        return (_this$props4 = _this.props).onChange.apply(_this$props4, [event].concat(args));
+        return (_this$props4 = _this.props).onChange.apply(_this$props4, [event].concat(args))
       }
 
       if (_this.props.valueLink) {
-        var _this$props$valueLink;
+        var _this$props$valueLink
 
-        return (_this$props$valueLink = _this.props.valueLink).requestChange.apply(_this$props$valueLink, [event.target.value].concat(args));
+        return (_this$props$valueLink = _this.props.valueLink).requestChange.apply(_this$props$valueLink, [event.target.value].concat(args))
       }
-    });
+    })
 
     _defineProperty(_assertThisInitialized(_this), "handleChange", function (ev) {
-      isComposing = false;
+      isComposing = false
 
       if (isIE()) {
         // if we are inside iframe, we need to find activeElement within its contentDocument
-        var currentDocument = document.activeElement && document.activeElement.contentDocument || document;
+        var currentDocument = document.activeElement && document.activeElement.contentDocument || document
 
         if (currentDocument.activeElement !== ev.target) {
           // fix an IE bug (blur from empty input element with placeholder attribute trigger "input" event)
-          return;
+          return
         }
       }
 
-      var value = _this.props.value || '';
-      var config = readConfigFromChildren(_this.props.children);
-      var newPlainTextValue = ev.target.value;
-      var selectionStartBefore = _this.state.selectionStart;
+      var value = _this.props.value || ''
+      var config = readConfigFromChildren(_this.props.children)
+      var newPlainTextValue = ev.target.value
+      var selectionStartBefore = _this.state.selectionStart
 
       if (selectionStartBefore == null) {
-        selectionStartBefore = ev.target.selectionStart;
+        selectionStartBefore = ev.target.selectionStart
       }
 
-      var selectionEndBefore = _this.state.selectionEnd;
+      var selectionEndBefore = _this.state.selectionEnd
 
       if (selectionEndBefore == null) {
-        selectionEndBefore = ev.target.selectionEnd;
+        selectionEndBefore = ev.target.selectionEnd
       } // Derive the new value to set by applying the local change in the textarea's plain text
 
 
@@ -1408,34 +1408,34 @@ var MentionsInput = /*#__PURE__*/function (_React$Component) {
         selectionStartBefore: selectionStartBefore,
         selectionEndBefore: selectionEndBefore,
         selectionEndAfter: ev.target.selectionEnd
-      }, config); // In case a mention is deleted, also adjust the new plain text value
+      }, config) // In case a mention is deleted, also adjust the new plain text value
 
-      newPlainTextValue = getPlainText(newValue, config); // Save current selection after change to be able to restore caret position after rerendering
+      newPlainTextValue = getPlainText(newValue, config) // Save current selection after change to be able to restore caret position after rerendering
 
-      var selectionStart = ev.target.selectionStart;
-      var selectionEnd = ev.target.selectionEnd;
-      var setSelectionAfterMentionChange = false; // Adjust selection range in case a mention will be deleted by the characters outside of the
+      var selectionStart = ev.target.selectionStart
+      var selectionEnd = ev.target.selectionEnd
+      var setSelectionAfterMentionChange = false // Adjust selection range in case a mention will be deleted by the characters outside of the
       // selection range that are automatically deleted
 
-      var startOfMention = findStartOfMentionInPlainText(value, config, selectionStart);
+      var startOfMention = findStartOfMentionInPlainText(value, config, selectionStart)
 
       if (startOfMention !== undefined && _this.state.selectionEnd > startOfMention) {
         // only if a deletion has taken place
-        selectionStart = startOfMention + (ev.nativeEvent.data ? ev.nativeEvent.data.length : 0);
-        selectionEnd = selectionStart;
-        setSelectionAfterMentionChange = true;
+        selectionStart = startOfMention + (ev.nativeEvent.data ? ev.nativeEvent.data.length : 0)
+        selectionEnd = selectionStart
+        setSelectionAfterMentionChange = true
       }
 
       _this.setState({
         selectionStart: selectionStart,
         selectionEnd: selectionEnd,
         setSelectionAfterMentionChange: setSelectionAfterMentionChange
-      });
+      })
 
-      var mentions = getMentions(newValue, config);
+      var mentions = getMentions(newValue, config)
 
       if (ev.nativeEvent.isComposing && selectionStart === selectionEnd) {
-        _this.updateMentionsQueries(_this.inputElement.value, selectionStart);
+        _this.updateMentionsQueries(_this.inputElement.value, selectionStart)
       } // Propagate change
       // let handleChange = this.getOnChange(this.props) || emptyFunction;
 
@@ -1444,346 +1444,346 @@ var MentionsInput = /*#__PURE__*/function (_React$Component) {
         target: {
           value: newValue
         }
-      }; // this.props.onChange.call(this, eventMock, newValue, newPlainTextValue, mentions);
+      } // this.props.onChange.call(this, eventMock, newValue, newPlainTextValue, mentions);
 
-      _this.executeOnChange(eventMock, newValue, newPlainTextValue, mentions);
-    });
+      _this.executeOnChange(eventMock, newValue, newPlainTextValue, mentions)
+    })
 
     _defineProperty(_assertThisInitialized(_this), "handleSelect", function (ev) {
       // keep track of selection range / caret position
       _this.setState({
         selectionStart: ev.target.selectionStart,
         selectionEnd: ev.target.selectionEnd
-      }); // do nothing while a IME composition session is active
+      }) // do nothing while a IME composition session is active
 
 
-      if (isComposing) return; // refresh suggestions queries
+      if (isComposing) return // refresh suggestions queries
 
-      var el = _this.inputElement;
+      var el = _this.inputElement
 
       if (ev.target.selectionStart === ev.target.selectionEnd) {
-        _this.updateMentionsQueries(el.value, ev.target.selectionStart);
+        _this.updateMentionsQueries(el.value, ev.target.selectionStart)
       } else {
-        _this.clearSuggestions();
+        _this.clearSuggestions()
       } // sync highlighters scroll position
 
 
-      _this.updateHighlighterScroll();
+      _this.updateHighlighterScroll()
 
-      _this.props.onSelect(ev);
-    });
+      _this.props.onSelect(ev)
+    })
 
     _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (ev) {
       // do not intercept key events if the suggestions overlay is not shown
-      var suggestionsCount = countSuggestions(_this.state.suggestions);
+      var suggestionsCount = countSuggestions(_this.state.suggestions)
 
       if (suggestionsCount === 0 || !_this.suggestionsElement) {
-        _this.props.onKeyDown(ev);
+        _this.props.onKeyDown(ev)
 
-        return;
+        return
       }
 
       if (Object.values(KEY).indexOf(ev.keyCode) >= 0) {
-        ev.preventDefault();
-        ev.stopPropagation();
+        ev.preventDefault()
+        ev.stopPropagation()
       }
 
       switch (ev.keyCode) {
         case KEY.ESC:
           {
-            _this.clearSuggestions();
+            _this.clearSuggestions()
 
-            return;
+            return
           }
 
         case KEY.DOWN:
           {
-            _this.shiftFocus(+1);
+            _this.shiftFocus(+1)
 
-            return;
+            return
           }
 
         case KEY.UP:
           {
-            _this.shiftFocus(-1);
+            _this.shiftFocus(-1)
 
-            return;
+            return
           }
 
         case KEY.RETURN:
           {
-            _this.selectFocused();
+            _this.selectFocused()
 
-            return;
+            return
           }
 
         case KEY.TAB:
           {
-            _this.selectFocused();
+            _this.selectFocused()
 
-            return;
+            return
           }
 
         default:
           {
-            return;
+            return
           }
       }
-    });
+    })
 
     _defineProperty(_assertThisInitialized(_this), "shiftFocus", function (delta) {
-      var suggestionsCount = countSuggestions(_this.state.suggestions);
+      var suggestionsCount = countSuggestions(_this.state.suggestions)
 
       _this.setState({
         focusIndex: (suggestionsCount + _this.state.focusIndex + delta) % suggestionsCount,
         scrollFocusedIntoView: true
-      });
-    });
+      })
+    })
 
     _defineProperty(_assertThisInitialized(_this), "selectFocused", function () {
       var _this$state2 = _this.state,
-          suggestions = _this$state2.suggestions,
-          focusIndex = _this$state2.focusIndex;
+        suggestions = _this$state2.suggestions,
+        focusIndex = _this$state2.focusIndex
       var _Object$values$reduce = Object.values(suggestions).reduce(function (acc, _ref) {
         var results = _ref.results,
-            queryInfo = _ref.queryInfo;
+          queryInfo = _ref.queryInfo
         return [].concat(_toConsumableArray(acc), _toConsumableArray(results.map(function (result) {
           return {
             result: result,
             queryInfo: queryInfo
-          };
-        })));
+          }
+        })))
       }, [])[focusIndex],
-          result = _Object$values$reduce.result,
-          queryInfo = _Object$values$reduce.queryInfo;
+        result = _Object$values$reduce.result,
+        queryInfo = _Object$values$reduce.queryInfo
 
-      _this.addMention(result, queryInfo);
+      _this.addMention(result, queryInfo)
 
       _this.setState({
         focusIndex: 0
-      });
-    });
+      })
+    })
 
     _defineProperty(_assertThisInitialized(_this), "handleBlur", function (ev) {
-      var clickedSuggestion = _this._suggestionsMouseDown;
-      _this._suggestionsMouseDown = false; // only reset selection if the mousedown happened on an element
+      var clickedSuggestion = _this._suggestionsMouseDown
+      _this._suggestionsMouseDown = false // only reset selection if the mousedown happened on an element
       // other than the suggestions overlay
 
       if (!clickedSuggestion) {
         _this.setState({
           selectionStart: null,
           selectionEnd: null
-        });
+        })
       }
 
       window.setTimeout(function () {
-        _this.updateHighlighterScroll();
-      }, 1);
+        _this.updateHighlighterScroll()
+      }, 1)
 
-      _this.props.onBlur(ev, clickedSuggestion);
-    });
+      _this.props.onBlur(ev, clickedSuggestion)
+    })
 
     _defineProperty(_assertThisInitialized(_this), "handleSuggestionsMouseDown", function (ev) {
-      _this._suggestionsMouseDown = true;
-    });
+      _this._suggestionsMouseDown = true
+    })
 
     _defineProperty(_assertThisInitialized(_this), "handleSuggestionsMouseEnter", function (focusIndex) {
       _this.setState({
         focusIndex: focusIndex,
         scrollFocusedIntoView: false
-      });
-    });
+      })
+    })
 
     _defineProperty(_assertThisInitialized(_this), "updateSuggestionsPosition", function () {
-      var caretPosition = _this.state.caretPosition;
+      var caretPosition = _this.state.caretPosition
       var _this$props5 = _this.props,
-          suggestionsPortalHost = _this$props5.suggestionsPortalHost,
-          allowSuggestionsAboveCursor = _this$props5.allowSuggestionsAboveCursor,
-          forceSuggestionsAboveCursor = _this$props5.forceSuggestionsAboveCursor;
+        suggestionsPortalHost = _this$props5.suggestionsPortalHost,
+        allowSuggestionsAboveCursor = _this$props5.allowSuggestionsAboveCursor,
+        forceSuggestionsAboveCursor = _this$props5.forceSuggestionsAboveCursor
 
       if (!caretPosition || !_this.suggestionsElement) {
-        return;
+        return
       }
 
-      var suggestions = _this.suggestionsElement;
-      var highlighter = _this.highlighterElement; // first get viewport-relative position (highlighter is offsetParent of caret):
+      var suggestions = _this.suggestionsElement
+      var highlighter = _this.highlighterElement // first get viewport-relative position (highlighter is offsetParent of caret):
 
-      var caretOffsetParentRect = highlighter.getBoundingClientRect();
-      var caretHeight = getComputedStyleLengthProp(highlighter, 'font-size');
+      var caretOffsetParentRect = highlighter.getBoundingClientRect()
+      var caretHeight = getComputedStyleLengthProp(highlighter, 'font-size')
       var viewportRelative = {
         left: caretOffsetParentRect.left + caretPosition.left,
         top: caretOffsetParentRect.top + caretPosition.top + caretHeight
-      };
-      var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
+      }
+      var viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)
 
       if (!suggestions) {
-        return;
+        return
       }
 
-      var position = {}; // if suggestions menu is in a portal, update position to be releative to its portal node
+      var position = {} // if suggestions menu is in a portal, update position to be releative to its portal node
 
       if (suggestionsPortalHost) {
-        position.position = 'fixed';
-        var left = viewportRelative.left;
-        var top = viewportRelative.top; // absolute/fixed positioned elements are positioned according to their entire box including margins; so we remove margins here:
+        position.position = 'fixed'
+        var left = viewportRelative.left
+        var top = viewportRelative.top // absolute/fixed positioned elements are positioned according to their entire box including margins; so we remove margins here:
 
-        left -= getComputedStyleLengthProp(suggestions, 'margin-left');
-        top -= getComputedStyleLengthProp(suggestions, 'margin-top'); // take into account highlighter/textinput scrolling:
+        left -= getComputedStyleLengthProp(suggestions, 'margin-left')
+        top -= getComputedStyleLengthProp(suggestions, 'margin-top') // take into account highlighter/textinput scrolling:
 
-        left -= highlighter.scrollLeft;
-        top -= highlighter.scrollTop; // guard for mentions suggestions list clipped by right edge of window
+        left -= highlighter.scrollLeft
+        top -= highlighter.scrollTop // guard for mentions suggestions list clipped by right edge of window
 
-        var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
+        var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
 
         if (left + suggestions.offsetWidth > viewportWidth) {
-          position.left = Math.max(0, viewportWidth - suggestions.offsetWidth);
+          position.left = Math.max(0, viewportWidth - suggestions.offsetWidth)
         } else {
-          position.left = left;
+          position.left = left
         } // guard for mentions suggestions list clipped by bottom edge of window if allowSuggestionsAboveCursor set to true.
         // Move the list up above the caret if it's getting cut off by the bottom of the window, provided that the list height
         // is small enough to NOT cover up the caret
 
 
         if (allowSuggestionsAboveCursor && top + suggestions.offsetHeight > viewportHeight && suggestions.offsetHeight < top - caretHeight || forceSuggestionsAboveCursor) {
-          position.top = Math.max(0, top - suggestions.offsetHeight - caretHeight);
+          position.top = Math.max(0, top - suggestions.offsetHeight - caretHeight)
         } else {
-          position.top = top;
+          position.top = top
         }
       } else {
-        var _left = caretPosition.left - highlighter.scrollLeft;
+        var _left = caretPosition.left - highlighter.scrollLeft
 
-        var _top = caretPosition.top - highlighter.scrollTop; // guard for mentions suggestions list clipped by right edge of window
+        var _top = caretPosition.top - highlighter.scrollTop // guard for mentions suggestions list clipped by right edge of window
 
 
         if (_left + suggestions.offsetWidth > _this.containerElement.offsetWidth) {
-          position.right = 0;
+          position.right = 0
         } else {
-          position.left = _left;
+          position.left = _left
         } // guard for mentions suggestions list clipped by bottom edge of window if allowSuggestionsAboveCursor set to true.
         // move the list up above the caret if it's getting cut off by the bottom of the window, provided that the list height
         // is small enough to NOT cover up the caret
 
 
         if (allowSuggestionsAboveCursor && viewportRelative.top - highlighter.scrollTop + suggestions.offsetHeight > viewportHeight && suggestions.offsetHeight < caretOffsetParentRect.top - caretHeight - highlighter.scrollTop || forceSuggestionsAboveCursor) {
-          position.top = _top - suggestions.offsetHeight - caretHeight;
+          position.top = _top - suggestions.offsetHeight - caretHeight
         } else {
-          position.top = _top;
+          position.top = _top
         }
       }
 
       if (position.left === _this.state.suggestionsPosition.left && position.top === _this.state.suggestionsPosition.top && position.position === _this.state.suggestionsPosition.position) {
-        return;
+        return
       }
 
       _this.setState({
         suggestionsPosition: position
-      });
-    });
+      })
+    })
 
     _defineProperty(_assertThisInitialized(_this), "updateHighlighterScroll", function () {
-      var input = _this.inputElement;
-      var highlighter = _this.highlighterElement;
+      var input = _this.inputElement
+      var highlighter = _this.highlighterElement
 
       if (!input || !highlighter) {
         // since the invocation of this function is deferred,
         // the whole component may have been unmounted in the meanwhile
-        return;
+        return
       }
 
-      highlighter.scrollLeft = input.scrollLeft;
-      highlighter.scrollTop = input.scrollTop;
-      highlighter.height = input.height;
-    });
+      highlighter.scrollLeft = input.scrollLeft
+      highlighter.scrollTop = input.scrollTop
+      highlighter.height = input.height
+    })
 
     _defineProperty(_assertThisInitialized(_this), "handleCompositionStart", function () {
-      isComposing = true;
-    });
+      isComposing = true
+    })
 
     _defineProperty(_assertThisInitialized(_this), "handleCompositionEnd", function () {
-      isComposing = false;
-    });
+      isComposing = false
+    })
 
     _defineProperty(_assertThisInitialized(_this), "setSelection", function (selectionStart, selectionEnd) {
-      if (selectionStart === null || selectionEnd === null) return;
-      var el = _this.inputElement;
+      if (selectionStart === null || selectionEnd === null) return
+      var el = _this.inputElement
 
       if (el.setSelectionRange) {
-        el.setSelectionRange(selectionStart, selectionEnd);
+        el.setSelectionRange(selectionStart, selectionEnd)
       } else if (el.createTextRange) {
-        var range = el.createTextRange();
-        range.collapse(true);
-        range.moveEnd('character', selectionEnd);
-        range.moveStart('character', selectionStart);
-        range.select();
+        var range = el.createTextRange()
+        range.collapse(true)
+        range.moveEnd('character', selectionEnd)
+        range.moveStart('character', selectionStart)
+        range.select()
       }
-    });
+    })
 
     _defineProperty(_assertThisInitialized(_this), "updateMentionsQueries", function (plainTextValue, caretPosition) {
       // Invalidate previous queries. Async results for previous queries will be neglected.
-      _this._queryId++;
-      _this.suggestions = {};
+      _this._queryId++
+      _this.suggestions = {}
 
       _this.setState({
         suggestions: {}
-      });
+      })
 
-      var value = _this.props.value || '';
-      var children = _this.props.children;
-      var config = readConfigFromChildren(children);
-      var positionInValue = mapPlainTextIndex(value, config, caretPosition, 'NULL'); // If caret is inside of mention, do not query
+      var value = _this.props.value || ''
+      var children = _this.props.children
+      var config = readConfigFromChildren(children)
+      var positionInValue = mapPlainTextIndex(value, config, caretPosition, 'NULL') // If caret is inside of mention, do not query
 
       if (positionInValue === null) {
-        return;
+        return
       } // Extract substring in between the end of the previous mention and the caret
 
 
-      var substringStartIndex = getEndOfLastMention(value.substring(0, positionInValue), config);
-      var substring = plainTextValue.substring(substringStartIndex, caretPosition); // Check if suggestions have to be shown:
+      var substringStartIndex = getEndOfLastMention(value.substring(0, positionInValue), config)
+      var substring = plainTextValue.substring(substringStartIndex, caretPosition) // Check if suggestions have to be shown:
       // Match the trigger patterns of all Mention children on the extracted substring
 
       React__default.Children.forEach(children, function (child, childIndex) {
         if (!child) {
-          return;
+          return
         }
 
-        var regex = makeTriggerRegex(child.props.trigger, _this.props);
-        var match = substring.match(regex);
+        var regex = makeTriggerRegex(child.props.trigger, _this.props)
+        var match = substring.match(regex)
 
         if (match) {
-          var querySequenceStart = substringStartIndex + substring.indexOf(match[1], match.index);
+          var querySequenceStart = substringStartIndex + substring.indexOf(match[1], match.index)
 
-          _this.queryData(match[2], childIndex, querySequenceStart, querySequenceStart + match[1].length, plainTextValue);
+          _this.queryData(match[2], childIndex, querySequenceStart, querySequenceStart + match[1].length, plainTextValue)
         }
-      });
-    });
+      })
+    })
 
     _defineProperty(_assertThisInitialized(_this), "clearSuggestions", function () {
       // Invalidate previous queries. Async results for previous queries will be neglected.
-      _this._queryId++;
-      _this.suggestions = {};
+      _this._queryId++
+      _this.suggestions = {}
 
       _this.setState({
         suggestions: {},
         focusIndex: 0
-      });
-    });
+      })
+    })
 
     _defineProperty(_assertThisInitialized(_this), "queryData", function (query, childIndex, querySequenceStart, querySequenceEnd, plainTextValue) {
       var _this$props6 = _this.props,
-          children = _this$props6.children,
-          ignoreAccents = _this$props6.ignoreAccents;
-      var mentionChild = React.Children.toArray(children)[childIndex];
-      var provideData = getDataProvider(mentionChild.props.data, ignoreAccents);
-      var syncResult = provideData(query, _this.updateSuggestions.bind(null, _this._queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue));
+        children = _this$props6.children,
+        ignoreAccents = _this$props6.ignoreAccents
+      var mentionChild = React.Children.toArray(children)[childIndex]
+      var provideData = getDataProvider(mentionChild.props.data, ignoreAccents)
+      var syncResult = provideData(query, _this.updateSuggestions.bind(null, _this._queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue))
 
       if (syncResult instanceof Array) {
-        _this.updateSuggestions(_this._queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue, syncResult);
+        _this.updateSuggestions(_this._queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue, syncResult)
       }
-    });
+    })
 
     _defineProperty(_assertThisInitialized(_this), "updateSuggestions", function (queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue, results) {
       // neglect async results from previous queries
-      if (queryId !== _this._queryId) return; // save in property so that multiple sync state updates from different mentions sources
+      if (queryId !== _this._queryId) return // save in property so that multiple sync state updates from different mentions sources
       // won't overwrite each other
 
       _this.suggestions = _objectSpread$1(_objectSpread$1({}, _this.suggestions), {}, _defineProperty({}, childIndex, {
@@ -1795,96 +1795,96 @@ var MentionsInput = /*#__PURE__*/function (_React$Component) {
           plainTextValue: plainTextValue
         },
         results: results
-      }));
-      var focusIndex = _this.state.focusIndex;
-      var suggestionsCount = countSuggestions(_this.suggestions);
+      }))
+      var focusIndex = _this.state.focusIndex
+      var suggestionsCount = countSuggestions(_this.suggestions)
 
       _this.setState({
         suggestions: _this.suggestions,
         focusIndex: focusIndex >= suggestionsCount ? Math.max(suggestionsCount - 1, 0) : focusIndex
-      });
-    });
+      })
+    })
 
     _defineProperty(_assertThisInitialized(_this), "addMention", function (_ref2, _ref3) {
       var id = _ref2.id,
-          display = _ref2.display;
+        display = _ref2.display
       var childIndex = _ref3.childIndex,
-          querySequenceStart = _ref3.querySequenceStart,
-          querySequenceEnd = _ref3.querySequenceEnd,
-          plainTextValue = _ref3.plainTextValue;
+        querySequenceStart = _ref3.querySequenceStart,
+        querySequenceEnd = _ref3.querySequenceEnd,
+        plainTextValue = _ref3.plainTextValue
       // Insert mention in the marked up value at the correct position
-      var value = _this.props.value || '';
-      var config = readConfigFromChildren(_this.props.children);
-      var mentionsChild = React.Children.toArray(_this.props.children)[childIndex];
+      var value = _this.props.value || ''
+      var config = readConfigFromChildren(_this.props.children)
+      var mentionsChild = React.Children.toArray(_this.props.children)[childIndex]
       var _mentionsChild$props = mentionsChild.props,
-          markup = _mentionsChild$props.markup,
-          displayTransform = _mentionsChild$props.displayTransform,
-          appendSpaceOnAdd = _mentionsChild$props.appendSpaceOnAdd,
-          onAdd = _mentionsChild$props.onAdd;
-      var start = mapPlainTextIndex(value, config, querySequenceStart, 'START');
-      var end = start + querySequenceEnd - querySequenceStart;
-      var insert = makeMentionsMarkup(markup, id, display);
+        markup = _mentionsChild$props.markup,
+        displayTransform = _mentionsChild$props.displayTransform,
+        appendSpaceOnAdd = _mentionsChild$props.appendSpaceOnAdd,
+        onAdd = _mentionsChild$props.onAdd
+      var start = mapPlainTextIndex(value, config, querySequenceStart, 'START')
+      var end = start + querySequenceEnd - querySequenceStart
+      var insert = makeMentionsMarkup(markup, id, display)
 
       if (appendSpaceOnAdd) {
-        insert += ' ';
+        insert += ' '
       }
 
-      var newValue = spliceString(value, start, end, insert); // Refocus input and set caret position to end of mention
+      var newValue = spliceString(value, start, end, insert) // Refocus input and set caret position to end of mention
 
-      _this.inputElement.focus();
+      _this.inputElement.focus()
 
-      var displayValue = displayTransform(id, display);
+      var displayValue = displayTransform(id, display)
 
       if (appendSpaceOnAdd) {
-        displayValue += ' ';
+        displayValue += ' '
       }
 
-      var newCaretPosition = querySequenceStart + displayValue.length;
+      var newCaretPosition = querySequenceStart + displayValue.length
 
       _this.setState({
         selectionStart: newCaretPosition,
         selectionEnd: newCaretPosition,
         setSelectionAfterMentionChange: true
-      }); // Propagate change
+      }) // Propagate change
 
 
       var eventMock = {
         target: {
           value: newValue
         }
-      };
-      var mentions = getMentions(newValue, config);
-      var newPlainTextValue = spliceString(plainTextValue, querySequenceStart, querySequenceEnd, displayValue);
+      }
+      var mentions = getMentions(newValue, config)
+      var newPlainTextValue = spliceString(plainTextValue, querySequenceStart, querySequenceEnd, displayValue)
 
-      _this.executeOnChange(eventMock, newValue, newPlainTextValue, mentions);
+      _this.executeOnChange(eventMock, newValue, newPlainTextValue, mentions)
 
       if (onAdd) {
-        onAdd(id, display, start, end);
+        onAdd(id, display, start, end)
       } // Make sure the suggestions overlay is closed
 
 
-      _this.clearSuggestions();
-    });
+      _this.clearSuggestions()
+    })
 
     _defineProperty(_assertThisInitialized(_this), "isLoading", function () {
-      var isLoading = false;
+      var isLoading = false
       React__default.Children.forEach(_this.props.children, function (child) {
-        isLoading = isLoading || child && child.props.isLoading;
-      });
-      return isLoading;
-    });
+        isLoading = isLoading || child && child.props.isLoading
+      })
+      return isLoading
+    })
 
     _defineProperty(_assertThisInitialized(_this), "isOpened", function () {
-      return isNumber(_this.state.selectionStart) && (countSuggestions(_this.state.suggestions) !== 0 || _this.isLoading());
-    });
+      return isNumber(_this.state.selectionStart) && (countSuggestions(_this.state.suggestions) !== 0 || _this.isLoading())
+    })
 
-    _defineProperty(_assertThisInitialized(_this), "_queryId", 0);
+    _defineProperty(_assertThisInitialized(_this), "_queryId", 0)
 
-    _this.suggestions = {};
-    _this.uuidSuggestionsOverlay = Math.random().toString(16).substring(2);
-    _this.handleCopy = _this.handleCopy.bind(_assertThisInitialized(_this));
-    _this.handleCut = _this.handleCut.bind(_assertThisInitialized(_this));
-    _this.handlePaste = _this.handlePaste.bind(_assertThisInitialized(_this));
+    _this.suggestions = {}
+    _this.uuidSuggestionsOverlay = Math.random().toString(16).substring(2)
+    _this.handleCopy = _this.handleCopy.bind(_assertThisInitialized(_this))
+    _this.handleCut = _this.handleCut.bind(_assertThisInitialized(_this))
+    _this.handlePaste = _this.handlePaste.bind(_assertThisInitialized(_this))
     _this.state = {
       focusIndex: 0,
       selectionStart: null,
@@ -1893,17 +1893,17 @@ var MentionsInput = /*#__PURE__*/function (_React$Component) {
       caretPosition: null,
       suggestionsPosition: {},
       setSelectionAfterHandlePaste: false
-    };
-    return _this;
+    }
+    return _this
   }
 
   _createClass(MentionsInput, [{
     key: "componentDidMount",
     value: function componentDidMount() {
-      document.addEventListener('copy', this.handleCopy);
-      document.addEventListener('cut', this.handleCut);
-      document.addEventListener('paste', this.handlePaste);
-      this.updateSuggestionsPosition();
+      document.addEventListener('copy', this.handleCopy)
+      document.addEventListener('cut', this.handleCut)
+      document.addEventListener('paste', this.handlePaste)
+      this.updateSuggestionsPosition()
     }
   }, {
     key: "componentDidUpdate",
@@ -1911,7 +1911,7 @@ var MentionsInput = /*#__PURE__*/function (_React$Component) {
       // Update position of suggestions unless this componentDidUpdate was
       // triggered by an update to suggestionsPosition.
       if (prevState.suggestionsPosition === this.state.suggestionsPosition) {
-        this.updateSuggestionsPosition();
+        this.updateSuggestionsPosition()
       } // maintain selection in case a mention is added/removed causing
       // the cursor to jump to the end
 
@@ -1919,171 +1919,171 @@ var MentionsInput = /*#__PURE__*/function (_React$Component) {
       if (this.state.setSelectionAfterMentionChange) {
         this.setState({
           setSelectionAfterMentionChange: false
-        });
-        this.setSelection(this.state.selectionStart, this.state.selectionEnd);
+        })
+        this.setSelection(this.state.selectionStart, this.state.selectionEnd)
       }
 
       if (this.state.setSelectionAfterHandlePaste) {
         this.setState({
           setSelectionAfterHandlePaste: false
-        });
-        this.setSelection(this.state.selectionStart, this.state.selectionEnd);
+        })
+        this.setSelection(this.state.selectionStart, this.state.selectionEnd)
       }
     }
   }, {
     key: "componentWillUnmount",
     value: function componentWillUnmount() {
-      document.removeEventListener('copy', this.handleCopy);
-      document.removeEventListener('cut', this.handleCut);
-      document.removeEventListener('paste', this.handlePaste);
+      document.removeEventListener('copy', this.handleCopy)
+      document.removeEventListener('cut', this.handleCut)
+      document.removeEventListener('paste', this.handlePaste)
     }
   }, {
     key: "render",
     value: function render() {
       return /*#__PURE__*/React__default.createElement("div", _extends({
         ref: this.setContainerElement
-      }, this.props.style), this.renderControl(), this.renderSuggestionsOverlay());
+      }, this.props.style), this.renderControl(), this.renderSuggestionsOverlay())
     }
   }, {
     key: "handlePaste",
     value: function handlePaste(event) {
       if (event.target !== this.inputElement) {
-        return;
+        return
       }
 
       if (!this.supportsClipboardActions(event)) {
-        return;
+        return
       }
 
-      event.preventDefault();
+      event.preventDefault()
       var _this$state3 = this.state,
-          selectionStart = _this$state3.selectionStart,
-          selectionEnd = _this$state3.selectionEnd;
+        selectionStart = _this$state3.selectionStart,
+        selectionEnd = _this$state3.selectionEnd
       var _this$props7 = this.props,
-          value = _this$props7.value,
-          children = _this$props7.children;
-      var config = readConfigFromChildren(children);
-      var markupStartIndex = mapPlainTextIndex(value, config, selectionStart, 'START');
-      var markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, 'END');
-      var pastedMentions = event.clipboardData.getData('text/react-mentions');
-      var pastedData = event.clipboardData.getData('text/plain');
-      var newValue = spliceString(value, markupStartIndex, markupEndIndex, pastedMentions || pastedData).replace(/\r/g, '');
-      var newPlainTextValue = getPlainText(newValue, config);
+        value = _this$props7.value,
+        children = _this$props7.children
+      var config = readConfigFromChildren(children)
+      var markupStartIndex = mapPlainTextIndex(value, config, selectionStart, 'START')
+      var markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, 'END')
+      var pastedMentions = event.clipboardData.getData('text/react-mentions')
+      var pastedData = event.clipboardData.getData('text/plain')
+      var newValue = spliceString(value, markupStartIndex, markupEndIndex, pastedMentions || pastedData).replace(/\r/g, '')
+      var newPlainTextValue = getPlainText(newValue, config)
       var eventMock = {
         target: _objectSpread$1(_objectSpread$1({}, event.target), {}, {
           value: newValue
         })
-      };
-      this.executeOnChange(eventMock, newValue, newPlainTextValue, getMentions(newValue, config)); // Move the cursor position to the end of the pasted data
+      }
+      this.executeOnChange(eventMock, newValue, newPlainTextValue, getMentions(newValue, config)) // Move the cursor position to the end of the pasted data
 
-      var startOfMention = findStartOfMentionInPlainText(value, config, selectionStart);
-      var nextPos = (startOfMention || selectionStart) + getPlainText(pastedMentions || pastedData, config).length;
+      var startOfMention = findStartOfMentionInPlainText(value, config, selectionStart)
+      var nextPos = (startOfMention || selectionStart) + getPlainText(pastedMentions || pastedData, config).length
       this.setState({
         selectionStart: nextPos,
         selectionEnd: nextPos,
         setSelectionAfterHandlePaste: true
-      });
+      })
     }
   }, {
     key: "saveSelectionToClipboard",
     value: function saveSelectionToClipboard(event) {
       // use the actual selectionStart & selectionEnd instead of the one stored
       // in state to ensure copy & paste also works on disabled inputs & textareas
-      var selectionStart = this.inputElement.selectionStart;
-      var selectionEnd = this.inputElement.selectionEnd;
+      var selectionStart = this.inputElement.selectionStart
+      var selectionEnd = this.inputElement.selectionEnd
       var _this$props8 = this.props,
-          children = _this$props8.children,
-          value = _this$props8.value;
-      var config = readConfigFromChildren(children);
-      var markupStartIndex = mapPlainTextIndex(value, config, selectionStart, 'START');
-      var markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, 'END');
-      event.clipboardData.setData('text/plain', event.target.value.slice(selectionStart, selectionEnd));
-      event.clipboardData.setData('text/react-mentions', value.slice(markupStartIndex, markupEndIndex));
+        children = _this$props8.children,
+        value = _this$props8.value
+      var config = readConfigFromChildren(children)
+      var markupStartIndex = mapPlainTextIndex(value, config, selectionStart, 'START')
+      var markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, 'END')
+      event.clipboardData.setData('text/plain', event.target.value.slice(selectionStart, selectionEnd))
+      event.clipboardData.setData('text/react-mentions', value.slice(markupStartIndex, markupEndIndex))
     }
   }, {
     key: "supportsClipboardActions",
     value: function supportsClipboardActions(event) {
-      return !!event.clipboardData;
+      return !!event.clipboardData
     }
   }, {
     key: "handleCopy",
     value: function handleCopy(event) {
       if (event.target !== this.inputElement) {
-        return;
+        return
       }
 
       if (!this.supportsClipboardActions(event)) {
-        return;
+        return
       }
 
-      event.preventDefault();
-      this.saveSelectionToClipboard(event);
+      event.preventDefault()
+      this.saveSelectionToClipboard(event)
     }
   }, {
     key: "handleCut",
     value: function handleCut(event) {
       if (event.target !== this.inputElement) {
-        return;
+        return
       }
 
       if (!this.supportsClipboardActions(event)) {
-        return;
+        return
       }
 
-      event.preventDefault();
-      this.saveSelectionToClipboard(event);
+      event.preventDefault()
+      this.saveSelectionToClipboard(event)
       var _this$state4 = this.state,
-          selectionStart = _this$state4.selectionStart,
-          selectionEnd = _this$state4.selectionEnd;
+        selectionStart = _this$state4.selectionStart,
+        selectionEnd = _this$state4.selectionEnd
       var _this$props9 = this.props,
-          children = _this$props9.children,
-          value = _this$props9.value;
-      var config = readConfigFromChildren(children);
-      var markupStartIndex = mapPlainTextIndex(value, config, selectionStart, 'START');
-      var markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, 'END');
-      var newValue = [value.slice(0, markupStartIndex), value.slice(markupEndIndex)].join('');
-      var newPlainTextValue = getPlainText(newValue, config);
+        children = _this$props9.children,
+        value = _this$props9.value
+      var config = readConfigFromChildren(children)
+      var markupStartIndex = mapPlainTextIndex(value, config, selectionStart, 'START')
+      var markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, 'END')
+      var newValue = [value.slice(0, markupStartIndex), value.slice(markupEndIndex)].join('')
+      var newPlainTextValue = getPlainText(newValue, config)
       var eventMock = {
         target: _objectSpread$1(_objectSpread$1({}, event.target), {}, {
           value: newPlainTextValue
         })
-      };
-      this.executeOnChange(eventMock, newValue, newPlainTextValue, getMentions(value, config));
+      }
+      this.executeOnChange(eventMock, newValue, newPlainTextValue, getMentions(value, config))
     } // Handle input element's change event
 
-  }]);
+  }])
 
-  return MentionsInput;
-}(React__default.Component);
+  return MentionsInput
+}(React__default.Component)
 /**
  * Returns the computed length property value for the provided element.
  * Note: According to spec and testing, can count on length values coming back in pixels. See https://developer.mozilla.org/en-US/docs/Web/CSS/used_value#Difference_from_computed_value
  */
 
 
-_defineProperty(MentionsInput, "propTypes", propTypes);
+_defineProperty(MentionsInput, "propTypes", propTypes)
 
 _defineProperty(MentionsInput, "defaultProps", {
   ignoreAccents: false,
   singleLine: false,
   allowSuggestionsAboveCursor: false,
   onKeyDown: function onKeyDown() {
-    return null;
+    return null
   },
   onSelect: function onSelect() {
-    return null;
+    return null
   },
   onBlur: function onBlur() {
-    return null;
+    return null
   }
-});
+})
 
 var getComputedStyleLengthProp = function getComputedStyleLengthProp(forElement, propertyName) {
-  var length = parseFloat(window.getComputedStyle(forElement, null).getPropertyValue(propertyName));
-  return isFinite(length) ? length : 0;
-};
+  var length = parseFloat(window.getComputedStyle(forElement, null).getPropertyValue(propertyName))
+  return isFinite(length) ? length : 0
+}
 
-var isMobileSafari = typeof navigator !== 'undefined' && /iPhone|iPad|iPod/i.test(navigator.userAgent);
+var isMobileSafari = typeof navigator !== 'undefined' && /iPhone|iPad|iPod/i.test(navigator.userAgent)
 var styled$3 = createDefaultStyle({
   position: 'relative',
   overflowY: 'visible',
@@ -2112,30 +2112,30 @@ var styled$3 = createDefaultStyle({
     } : null)
   }
 }, function (_ref4) {
-  var singleLine = _ref4.singleLine;
+  var singleLine = _ref4.singleLine
   return {
     '&singleLine': singleLine,
     '&multiLine': !singleLine
-  };
-});
-var MentionsInput$1 = styled$3(MentionsInput);
+  }
+})
+var MentionsInput$1 = styled$3(MentionsInput)
 
 var defaultStyle = {
   fontWeight: 'inherit'
-};
+}
 
 var Mention = function Mention(_ref) {
   var display = _ref.display,
-      style = _ref.style,
-      className = _ref.className,
-      classNames = _ref.classNames;
+    style = _ref.style,
+    className = _ref.className,
+    classNames = _ref.classNames
   var styles = useStyles__default(defaultStyle, {
     style: style,
     className: className,
     classNames: classNames
-  });
-  return /*#__PURE__*/React__default.createElement("strong", styles, display);
-};
+  })
+  return /*#__PURE__*/React__default.createElement("strong", styles, display)
+}
 
 Mention.propTypes = {
   /**
@@ -2161,23 +2161,23 @@ Mention.propTypes = {
    */
   allowSpaceInQuery: PropTypes.bool,
   isLoading: PropTypes.bool
-};
+}
 Mention.defaultProps = {
   trigger: '@',
   markup: '@[__display__](__id__)',
   displayTransform: function displayTransform(id, display) {
-    return display || id;
+    return display || id
   },
   onAdd: function onAdd() {
-    return null;
+    return null
   },
   onRemove: function onRemove() {
-    return null;
+    return null
   },
   renderSuggestion: null,
   isLoading: false,
   appendSpaceOnAdd: false
-};
+}
 
-exports.Mention = Mention;
-exports.MentionsInput = MentionsInput$1;
+exports.Mention = Mention
+exports.MentionsInput = MentionsInput$1
diff --git a/node_modules/react-mentions/dist/react-mentions.cjs.js b/node_modules/react-mentions/dist/react-mentions.cjs.js
index 1687776..35dce0f 100644
--- a/node_modules/react-mentions/dist/react-mentions.cjs.js
+++ b/node_modules/react-mentions/dist/react-mentions.cjs.js
@@ -1,7 +1,3 @@
 'use strict';
 
-if (process.env.NODE_ENV === "production") {
-  module.exports = require("./react-mentions.cjs.prod.js");
-} else {
-  module.exports = require("./react-mentions.cjs.dev.js");
-}
+module.exports = require("./react-mentions.cjs.prod.js")
diff --git a/node_modules/react-mentions/dist/react-mentions.cjs.prod.js b/node_modules/react-mentions/dist/react-mentions.cjs.prod.js
index ad10143..1eaa42c 100644
--- a/node_modules/react-mentions/dist/react-mentions.cjs.prod.js
+++ b/node_modules/react-mentions/dist/react-mentions.cjs.prod.js
@@ -1,132 +1,132 @@
-"use strict";
+"use strict"
 
 function _interopDefault(ex) {
-  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
+  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex
 }
 
 Object.defineProperty(exports, "__esModule", {
   value: !0
-});
+})
 
-var _toConsumableArray = _interopDefault(require("@babel/runtime/helpers/toConsumableArray")), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _classCallCheck = _interopDefault(require("@babel/runtime/helpers/classCallCheck")), _createClass = _interopDefault(require("@babel/runtime/helpers/createClass")), _assertThisInitialized = _interopDefault(require("@babel/runtime/helpers/assertThisInitialized")), _inherits = _interopDefault(require("@babel/runtime/helpers/inherits")), _possibleConstructorReturn = _interopDefault(require("@babel/runtime/helpers/possibleConstructorReturn")), _getPrototypeOf = _interopDefault(require("@babel/runtime/helpers/getPrototypeOf")), _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), React = require("react"), React__default = _interopDefault(React), invariant = _interopDefault(require("invariant")), _slicedToArray = _interopDefault(require("@babel/runtime/helpers/slicedToArray")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), useStyles = require("substyle"), useStyles__default = _interopDefault(useStyles), PropTypes = _interopDefault(require("prop-types")), ReactDOM = _interopDefault(require("react-dom")), escapeRegex = function(str) {
-  return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
+var _toConsumableArray = _interopDefault(require("@babel/runtime/helpers/toConsumableArray")), _extends = _interopDefault(require("@babel/runtime/helpers/extends")), _classCallCheck = _interopDefault(require("@babel/runtime/helpers/classCallCheck")), _createClass = _interopDefault(require("@babel/runtime/helpers/createClass")), _assertThisInitialized = _interopDefault(require("@babel/runtime/helpers/assertThisInitialized")), _inherits = _interopDefault(require("@babel/runtime/helpers/inherits")), _possibleConstructorReturn = _interopDefault(require("@babel/runtime/helpers/possibleConstructorReturn")), _getPrototypeOf = _interopDefault(require("@babel/runtime/helpers/getPrototypeOf")), _defineProperty = _interopDefault(require("@babel/runtime/helpers/defineProperty")), React = require("react"), React__default = _interopDefault(React), invariant = _interopDefault(require("invariant")), _slicedToArray = _interopDefault(require("@babel/runtime/helpers/slicedToArray")), _objectWithoutProperties = _interopDefault(require("@babel/runtime/helpers/objectWithoutProperties")), useStyles = require("substyle"), useStyles__default = _interopDefault(useStyles), PropTypes = _interopDefault(require("prop-types")), ReactDOM = _interopDefault(require("react-dom")), escapeRegex = function (str) {
+  return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")
 }, PLACEHOLDERS = {
   id: "__id__",
   display: "__display__"
-}, findPositionOfCapturingGroup = function(markup, parameterName) {
-  invariant("id" === parameterName || "display" === parameterName, 'Second arg must be either "id" or "display", got: "'.concat(parameterName, '"'));
-  var indexDisplay = markup.indexOf(PLACEHOLDERS.display), indexId = markup.indexOf(PLACEHOLDERS.id);
+}, findPositionOfCapturingGroup = function (markup, parameterName) {
+  invariant("id" === parameterName || "display" === parameterName, 'Second arg must be either "id" or "display", got: "'.concat(parameterName, '"'))
+  var indexDisplay = markup.indexOf(PLACEHOLDERS.display), indexId = markup.indexOf(PLACEHOLDERS.id)
   return indexDisplay < 0 && (indexDisplay = null), indexId < 0 && (indexId = null),
-  invariant(null !== indexDisplay || null !== indexId, "The markup '".concat(markup, "' does not contain either of the placeholders '__id__' or '__display__'")), 
-  null !== indexDisplay && null !== indexId ? "id" === parameterName && indexId <= indexDisplay || "display" === parameterName && indexDisplay <= indexId ? 0 : 1 : 0;
-}, combineRegExps = function(regExps) {
-  var serializedRegexParser = /^\/(.+)\/(\w+)?$/;
-  return new RegExp(regExps.map(function(regex) {
-    var _serializedRegexParse = serializedRegexParser.exec(regex.toString()), _serializedRegexParse2 = _slicedToArray(_serializedRegexParse, 3), regexString = _serializedRegexParse2[1], regexFlags = _serializedRegexParse2[2];
+    invariant(null !== indexDisplay || null !== indexId, "The markup '".concat(markup, "' does not contain either of the placeholders '__id__' or '__display__'")),
+    null !== indexDisplay && null !== indexId ? "id" === parameterName && indexId <= indexDisplay || "display" === parameterName && indexDisplay <= indexId ? 0 : 1 : 0
+}, combineRegExps = function (regExps) {
+  var serializedRegexParser = /^\/(.+)\/(\w+)?$/
+  return new RegExp(regExps.map(function (regex) {
+    var _serializedRegexParse = serializedRegexParser.exec(regex.toString()), _serializedRegexParse2 = _slicedToArray(_serializedRegexParse, 3), regexString = _serializedRegexParse2[1], regexFlags = _serializedRegexParse2[2]
     return invariant(!regexFlags, "RegExp flags are not supported. Change /".concat(regexString, "/").concat(regexFlags, " into /").concat(regexString, "/")),
-    "(".concat(regexString, ")");
-  }).join("|"), "g");
-}, countPlaceholders = function(markup) {
-  var count = 0;
+      "(".concat(regexString, ")")
+  }).join("|"), "g")
+}, countPlaceholders = function (markup) {
+  var count = 0
   return markup.indexOf("__id__") >= 0 && count++, markup.indexOf("__display__") >= 0 && count++,
-  count;
-}, emptyFn = function() {}, iterateMentionsMarkup = function(value, config, markupIteratee) {
-  for (var match, textIteratee = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : emptyFn, regex = combineRegExps(config.map(function(c) {
-    return c.regex;
-  })), accOffset = 2, captureGroupOffsets = config.map(function(_ref) {
-    var markup = _ref.markup, result = accOffset;
-    return accOffset += countPlaceholders(markup) + 1, result;
-  }), start = 0, currentPlainTextIndex = 0; null !== (match = regex.exec(value)); ) {
-    var offset = captureGroupOffsets.find(function(o) {
-      return !!match[o];
-    }), mentionChildIndex = captureGroupOffsets.indexOf(offset), _config$mentionChildI = config[mentionChildIndex], markup = _config$mentionChildI.markup, displayTransform = _config$mentionChildI.displayTransform, idPos = offset + findPositionOfCapturingGroup(markup, "id"), displayPos = offset + findPositionOfCapturingGroup(markup, "display"), id = match[idPos], display = displayTransform(id, match[displayPos]), substr = value.substring(start, match.index);
+    count
+}, emptyFn = function () { }, iterateMentionsMarkup = function (value, config, markupIteratee) {
+  for (var match, textIteratee = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : emptyFn, regex = combineRegExps(config.map(function (c) {
+    return c.regex
+  })), accOffset = 2, captureGroupOffsets = config.map(function (_ref) {
+    var markup = _ref.markup, result = accOffset
+    return accOffset += countPlaceholders(markup) + 1, result
+  }), start = 0, currentPlainTextIndex = 0; null !== (match = regex.exec(value));) {
+    var offset = captureGroupOffsets.find(function (o) {
+      return !!match[o]
+    }), mentionChildIndex = captureGroupOffsets.indexOf(offset), _config$mentionChildI = config[mentionChildIndex], markup = _config$mentionChildI.markup, displayTransform = _config$mentionChildI.displayTransform, idPos = offset + findPositionOfCapturingGroup(markup, "id"), displayPos = offset + findPositionOfCapturingGroup(markup, "display"), id = match[idPos], display = displayTransform(id, match[displayPos]), substr = value.substring(start, match.index)
     textIteratee(substr, start, currentPlainTextIndex), currentPlainTextIndex += substr.length,
-    markupIteratee(match[0], match.index, currentPlainTextIndex, id, display, mentionChildIndex, start), 
-    currentPlainTextIndex += display.length, start = regex.lastIndex;
+      markupIteratee(match[0], match.index, currentPlainTextIndex, id, display, mentionChildIndex, start),
+      currentPlainTextIndex += display.length, start = regex.lastIndex
   }
-  start < value.length && textIteratee(value.substring(start), start, currentPlainTextIndex);
-}, getPlainText = function(value, config) {
-  var result = "";
-  return iterateMentionsMarkup(value, config, function(match, index, plainTextIndex, id, display) {
-    result += display;
-  }, function(plainText) {
-    result += plainText;
-  }), result;
-}, mapPlainTextIndex = function(value, config, indexInPlainText) {
-  var result, inMarkupCorrection = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "START";
-  if ("number" != typeof indexInPlainText) return indexInPlainText;
-  return iterateMentionsMarkup(value, config, function(markup, index, mentionPlainTextIndex, id, display, childIndex, lastMentionEndIndex) {
-    void 0 === result && mentionPlainTextIndex + display.length > indexInPlainText && (result = "NULL" === inMarkupCorrection ? null : index + ("END" === inMarkupCorrection ? markup.length : 0));
-  }, function(substr, index, substrPlainTextIndex) {
-    void 0 === result && substrPlainTextIndex + substr.length >= indexInPlainText && (result = index + indexInPlainText - substrPlainTextIndex);
-  }), void 0 === result ? value.length : result;
-}, spliceString = function(str, start, end, insert) {
-  return str.substring(0, start) + insert + str.substring(end);
-}, applyChangeToValue = function(value, plainTextValue, _ref, config) {
-  var selectionStartBefore = _ref.selectionStartBefore, selectionEndBefore = _ref.selectionEndBefore, selectionEndAfter = _ref.selectionEndAfter, oldPlainTextValue = getPlainText(value, config), lengthDelta = oldPlainTextValue.length - plainTextValue.length;
+  start < value.length && textIteratee(value.substring(start), start, currentPlainTextIndex)
+}, getPlainText = function (value, config) {
+  var result = ""
+  return iterateMentionsMarkup(value, config, function (match, index, plainTextIndex, id, display) {
+    result += display
+  }, function (plainText) {
+    result += plainText
+  }), result
+}, mapPlainTextIndex = function (value, config, indexInPlainText) {
+  var result, inMarkupCorrection = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : "START"
+  if ("number" != typeof indexInPlainText) return indexInPlainText
+  return iterateMentionsMarkup(value, config, function (markup, index, mentionPlainTextIndex, id, display, childIndex, lastMentionEndIndex) {
+    void 0 === result && mentionPlainTextIndex + display.length > indexInPlainText && (result = "NULL" === inMarkupCorrection ? null : index + ("END" === inMarkupCorrection ? markup.length : 0))
+  }, function (substr, index, substrPlainTextIndex) {
+    void 0 === result && substrPlainTextIndex + substr.length >= indexInPlainText && (result = index + indexInPlainText - substrPlainTextIndex)
+  }), void 0 === result ? value.length : result
+}, spliceString = function (str, start, end, insert) {
+  return str.substring(0, start) + insert + str.substring(end)
+}, applyChangeToValue = function (value, plainTextValue, _ref, config) {
+  var selectionStartBefore = _ref.selectionStartBefore, selectionEndBefore = _ref.selectionEndBefore, selectionEndAfter = _ref.selectionEndAfter, oldPlainTextValue = getPlainText(value, config), lengthDelta = oldPlainTextValue.length - plainTextValue.length
   "undefined" === selectionStartBefore && (selectionStartBefore = selectionEndAfter + lengthDelta),
-  "undefined" === selectionEndBefore && (selectionEndBefore = selectionStartBefore), 
-  selectionStartBefore === selectionEndBefore && selectionEndBefore === selectionEndAfter && oldPlainTextValue.length === plainTextValue.length && (selectionStartBefore -= 1);
-  var insert = plainTextValue.slice(selectionStartBefore, selectionEndAfter), spliceStart = Math.min(selectionStartBefore, selectionEndAfter), spliceEnd = selectionEndBefore;
-  selectionStartBefore === selectionEndAfter && (spliceEnd = Math.max(selectionEndBefore, selectionStartBefore + lengthDelta));
-  var mappedSpliceStart = mapPlainTextIndex(value, config, spliceStart, "START"), mappedSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, "END"), controlSpliceStart = mapPlainTextIndex(value, config, spliceStart, "NULL"), controlSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, "NULL"), willRemoveMention = null === controlSpliceStart || null === controlSpliceEnd, newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert);
+    "undefined" === selectionEndBefore && (selectionEndBefore = selectionStartBefore),
+    selectionStartBefore === selectionEndBefore && selectionEndBefore === selectionEndAfter && oldPlainTextValue.length === plainTextValue.length && (selectionStartBefore -= 1)
+  var insert = plainTextValue.slice(selectionStartBefore, selectionEndAfter), spliceStart = Math.min(selectionStartBefore, selectionEndAfter), spliceEnd = selectionEndBefore
+  selectionStartBefore === selectionEndAfter && (spliceEnd = Math.max(selectionEndBefore, selectionStartBefore + lengthDelta))
+  var mappedSpliceStart = mapPlainTextIndex(value, config, spliceStart, "START"), mappedSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, "END"), controlSpliceStart = mapPlainTextIndex(value, config, spliceStart, "NULL"), controlSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, "NULL"), willRemoveMention = null === controlSpliceStart || null === controlSpliceEnd, newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert)
   if (!willRemoveMention) {
-    var controlPlainTextValue = getPlainText(newValue, config);
+    var controlPlainTextValue = getPlainText(newValue, config)
     if (controlPlainTextValue !== plainTextValue) {
-      for (spliceStart = 0; plainTextValue[spliceStart] === controlPlainTextValue[spliceStart]; ) spliceStart++;
+      for (spliceStart = 0; plainTextValue[spliceStart] === controlPlainTextValue[spliceStart];) spliceStart++
       insert = plainTextValue.slice(spliceStart, selectionEndAfter), spliceEnd = oldPlainTextValue.lastIndexOf(plainTextValue.substring(selectionEndAfter)),
-      mappedSpliceStart = mapPlainTextIndex(value, config, spliceStart, "START"), mappedSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, "END"), 
-      newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert);
+        mappedSpliceStart = mapPlainTextIndex(value, config, spliceStart, "START"), mappedSpliceEnd = mapPlainTextIndex(value, config, spliceEnd, "END"),
+        newValue = spliceString(value, mappedSpliceStart, mappedSpliceEnd, insert)
     }
   }
-  return newValue;
-}, findStartOfMentionInPlainText = function(value, config, indexInPlainText) {
-  var result = indexInPlainText, foundMention = !1;
-  if (iterateMentionsMarkup(value, config, function(markup, index, mentionPlainTextIndex, id, display, childIndex, lastMentionEndIndex) {
+  return newValue
+}, findStartOfMentionInPlainText = function (value, config, indexInPlainText) {
+  var result = indexInPlainText, foundMention = !1
+  if (iterateMentionsMarkup(value, config, function (markup, index, mentionPlainTextIndex, id, display, childIndex, lastMentionEndIndex) {
     mentionPlainTextIndex <= indexInPlainText && mentionPlainTextIndex + display.length > indexInPlainText && (result = mentionPlainTextIndex,
-    foundMention = !0);
-  }), foundMention) return result;
-}, getMentions = function(value, config) {
-  var mentions = [];
-  return iterateMentionsMarkup(value, config, function(match, index, plainTextIndex, id, display, childIndex, start) {
+      foundMention = !0)
+  }), foundMention) return result
+}, getMentions = function (value, config) {
+  var mentions = []
+  return iterateMentionsMarkup(value, config, function (match, index, plainTextIndex, id, display, childIndex, start) {
     mentions.push({
       id: id,
       display: display,
       childIndex: childIndex,
       index: index,
       plainTextIndex: plainTextIndex
-    });
-  }), mentions;
-}, getSuggestionHtmlId = function(prefix, id) {
-  return "".concat(prefix, "-").concat(id);
-}, countSuggestions = function(suggestions) {
-  return Object.values(suggestions).reduce(function(acc, _ref) {
-    return acc + _ref.results.length;
-  }, 0);
-}, getEndOfLastMention = function(value, config) {
-  var mentions = getMentions(value, config), lastMention = mentions[mentions.length - 1];
-  return lastMention ? lastMention.plainTextIndex + lastMention.display.length : 0;
-}, markupToRegex = function(markup) {
-  var escapedMarkup = escapeRegex(markup), charAfterDisplay = markup[markup.indexOf(PLACEHOLDERS.display) + PLACEHOLDERS.display.length], charAfterId = markup[markup.indexOf(PLACEHOLDERS.id) + PLACEHOLDERS.id.length];
-  return new RegExp(escapedMarkup.replace(PLACEHOLDERS.display, "([^".concat(escapeRegex(charAfterDisplay || ""), "]+?)")).replace(PLACEHOLDERS.id, "([^".concat(escapeRegex(charAfterId || ""), "]+?)")));
-}, readConfigFromChildren = function(children) {
-  return React.Children.toArray(children).map(function(_ref) {
-    var _ref$props = _ref.props, markup = _ref$props.markup, regex = _ref$props.regex, displayTransform = _ref$props.displayTransform;
+    })
+  }), mentions
+}, getSuggestionHtmlId = function (prefix, id) {
+  return "".concat(prefix, "-").concat(id)
+}, countSuggestions = function (suggestions) {
+  return Object.values(suggestions).reduce(function (acc, _ref) {
+    return acc + _ref.results.length
+  }, 0)
+}, getEndOfLastMention = function (value, config) {
+  var mentions = getMentions(value, config), lastMention = mentions[mentions.length - 1]
+  return lastMention ? lastMention.plainTextIndex + lastMention.display.length : 0
+}, markupToRegex = function (markup) {
+  var escapedMarkup = escapeRegex(markup), charAfterDisplay = markup[markup.indexOf(PLACEHOLDERS.display) + PLACEHOLDERS.display.length], charAfterId = markup[markup.indexOf(PLACEHOLDERS.id) + PLACEHOLDERS.id.length]
+  return new RegExp(escapedMarkup.replace(PLACEHOLDERS.display, "([^".concat(escapeRegex(charAfterDisplay || ""), "]+?)")).replace(PLACEHOLDERS.id, "([^".concat(escapeRegex(charAfterId || ""), "]+?)")))
+}, readConfigFromChildren = function (children) {
+  return React.Children.toArray(children).map(function (_ref) {
+    var _ref$props = _ref.props, markup = _ref$props.markup, regex = _ref$props.regex, displayTransform = _ref$props.displayTransform
     return {
       markup: markup,
       regex: regex ? coerceCapturingGroups(regex, markup) : markupToRegex(markup),
-      displayTransform: displayTransform || function(id, display) {
-        return display || id;
+      displayTransform: displayTransform || function (id, display) {
+        return display || id
       }
-    };
-  });
-}, coerceCapturingGroups = function(regex, markup) {
-  var numberOfGroups = new RegExp(regex.toString() + "|").exec("").length - 1, numberOfPlaceholders = countPlaceholders(markup);
+    }
+  })
+}, coerceCapturingGroups = function (regex, markup) {
+  var numberOfGroups = new RegExp(regex.toString() + "|").exec("").length - 1, numberOfPlaceholders = countPlaceholders(markup)
   return invariant(numberOfGroups === numberOfPlaceholders, "Number of capturing groups in RegExp ".concat(regex.toString(), " (").concat(numberOfGroups, ") does not match the number of placeholders in the markup '").concat(markup, "' (").concat(numberOfPlaceholders, ")")),
-  regex;
-}, makeMentionsMarkup = function(markup, id, display) {
-  return markup.replace(PLACEHOLDERS.id, id).replace(PLACEHOLDERS.display, display);
-}, lettersDiacritics = [ {
+    regex
+}, makeMentionsMarkup = function (markup, id, display) {
+  return markup.replace(PLACEHOLDERS.id, id).replace(PLACEHOLDERS.display, display)
+}, lettersDiacritics = [{
   base: "A",
   letters: /(&#65;|&#9398;|&#65313;|&#192;|&#193;|&#194;|&#7846;|&#7844;|&#7850;|&#7848;|&#195;|&#256;|&#258;|&#7856;|&#7854;|&#7860;|&#7858;|&#550;|&#480;|&#196;|&#478;|&#7842;|&#197;|&#506;|&#461;|&#512;|&#514;|&#7840;|&#7852;|&#7862;|&#7680;|&#260;|&#570;|&#11375;|[\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F])/g
 }, {
@@ -396,130 +396,130 @@ var _toConsumableArray = _interopDefault(require("@babel/runtime/helpers/toConsu
 }, {
   base: "z",
   letters: /(&#122;|&#9449;|&#65370;|&#378;|&#7825;|&#380;|&#382;|&#7827;|&#7829;|&#438;|&#549;|&#576;|&#11372;|&#42851;|[\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763])/g
-} ], removeAccents = function(str) {
-  var formattedStr = str;
-  return lettersDiacritics.forEach(function(letterDiacritics) {
-    formattedStr = formattedStr.replace(letterDiacritics.letters, letterDiacritics.base);
-  }), formattedStr;
-}, normalizeString = function(str) {
-  return removeAccents(str).toLowerCase();
-}, getSubstringIndex = function(str, substr, ignoreAccents) {
-  return ignoreAccents ? normalizeString(str).indexOf(normalizeString(substr)) : str.toLowerCase().indexOf(substr.toLowerCase());
-}, isIE = function() {
-  return !!document.documentMode;
-}, isNumber = function(val) {
-  return "number" == typeof val;
-}, keys = function(obj) {
-  return obj === Object(obj) ? Object.keys(obj) : [];
-}, omit = function(obj) {
-  for (var _ref, _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) rest[_key - 1] = arguments[_key];
-  var keys = (_ref = []).concat.apply(_ref, rest);
-  return Object.keys(obj).reduce(function(acc, k) {
+}], removeAccents = function (str) {
+  var formattedStr = str
+  return lettersDiacritics.forEach(function (letterDiacritics) {
+    formattedStr = formattedStr.replace(letterDiacritics.letters, letterDiacritics.base)
+  }), formattedStr
+}, normalizeString = function (str) {
+  return removeAccents(str).toLowerCase()
+}, getSubstringIndex = function (str, substr, ignoreAccents) {
+  return ignoreAccents ? normalizeString(str).indexOf(normalizeString(substr)) : str.toLowerCase().indexOf(substr.toLowerCase())
+}, isIE = function () {
+  return !!document.documentMode
+}, isNumber = function (val) {
+  return "number" == typeof val
+}, keys = function (obj) {
+  return obj === Object(obj) ? Object.keys(obj) : []
+}, omit = function (obj) {
+  for (var _ref, _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) rest[_key - 1] = arguments[_key]
+  var keys = (_ref = []).concat.apply(_ref, rest)
+  return Object.keys(obj).reduce(function (acc, k) {
     return obj.hasOwnProperty(k) && !keys.includes(k) && void 0 !== obj[k] && (acc[k] = obj[k]),
-    acc;
-  }, {});
-}, _excluded = [ "style", "className", "classNames" ];
+      acc
+  }, {})
+}, _excluded = ["style", "className", "classNames"]
 
 function ownKeys(object, enumerableOnly) {
-  var keys = Object.keys(object);
+  var keys = Object.keys(object)
   if (Object.getOwnPropertySymbols) {
-    var symbols = Object.getOwnPropertySymbols(object);
-    enumerableOnly && (symbols = symbols.filter(function(sym) {
-      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
-    })), keys.push.apply(keys, symbols);
+    var symbols = Object.getOwnPropertySymbols(object)
+    enumerableOnly && (symbols = symbols.filter(function (sym) {
+      return Object.getOwnPropertyDescriptor(object, sym).enumerable
+    })), keys.push.apply(keys, symbols)
   }
-  return keys;
+  return keys
 }
 
 function _objectSpread(target) {
   for (var i = 1; i < arguments.length; i++) {
-    var source = null != arguments[i] ? arguments[i] : {};
-    i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
-      _defineProperty(target, key, source[key]);
-    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
-      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
-    });
+    var source = null != arguments[i] ? arguments[i] : {}
+    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
+      _defineProperty(target, key, source[key])
+    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
+      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))
+    })
   }
-  return target;
+  return target
 }
 
 function createDefaultStyle(defaultStyle, getModifiers) {
-  return function(ComponentToWrap) {
-    var DefaultStyleEnhancer = function(_ref) {
+  return function (ComponentToWrap) {
+    var DefaultStyleEnhancer = function (_ref) {
       var style = _ref.style, className = _ref.className, classNames = _ref.classNames, rest = _objectWithoutProperties(_ref, _excluded), modifiers = getModifiers ? getModifiers(rest) : void 0, styles = useStyles__default(defaultStyle, {
         style: style,
         className: className,
         classNames: classNames
-      }, modifiers);
+      }, modifiers)
       return React__default.createElement(ComponentToWrap, _extends({}, rest, {
         style: styles
-      }));
-    }, displayName = ComponentToWrap.displayName || ComponentToWrap.name || "Component";
+      }))
+    }, displayName = ComponentToWrap.displayName || ComponentToWrap.name || "Component"
     return DefaultStyleEnhancer.displayName = "defaultStyle(".concat(displayName, ")"),
-    React__default.forwardRef(function(props, ref) {
-      return DefaultStyleEnhancer(_objectSpread(_objectSpread({}, props), {}, {
-        ref: ref
-      }));
-    });
-  };
+      React__default.forwardRef(function (props, ref) {
+        return DefaultStyleEnhancer(_objectSpread(_objectSpread({}, props), {}, {
+          ref: ref
+        }))
+      })
+  }
 }
 
-var _generateComponentKey = function(usedKeys, id) {
-  return usedKeys.hasOwnProperty(id) ? usedKeys[id]++ : usedKeys[id] = 0, id + "_" + usedKeys[id];
-};
+var _generateComponentKey = function (usedKeys, id) {
+  return usedKeys.hasOwnProperty(id) ? usedKeys[id]++ : usedKeys[id] = 0, id + "_" + usedKeys[id]
+}
 
 function Highlighter(_ref) {
   var selectionStart = _ref.selectionStart, selectionEnd = _ref.selectionEnd, _ref$value = _ref.value, value = void 0 === _ref$value ? "" : _ref$value, onCaretPositionChange = _ref.onCaretPositionChange, containerRef = _ref.containerRef, children = _ref.children, style = (_ref.singleLine,
-  _ref.style), _useState = React.useState({
-    left: void 0,
-    top: void 0
-  }), _useState2 = _slicedToArray(_useState, 2), position = _useState2[0], setPosition = _useState2[1], _useState3 = React.useState(), _useState4 = _slicedToArray(_useState3, 2), caretElement = _useState4[0], setCaretElement = _useState4[1];
-  React.useEffect(function() {
-    notifyCaretPosition();
-  });
-  var caretPositionInMarkup, notifyCaretPosition = function() {
+    _ref.style), _useState = React.useState({
+      left: void 0,
+      top: void 0
+    }), _useState2 = _slicedToArray(_useState, 2), position = _useState2[0], setPosition = _useState2[1], _useState3 = React.useState(), _useState4 = _slicedToArray(_useState3, 2), caretElement = _useState4[0], setCaretElement = _useState4[1]
+  React.useEffect(function () {
+    notifyCaretPosition()
+  })
+  var caretPositionInMarkup, notifyCaretPosition = function () {
     if (caretElement) {
-      var offsetLeft = caretElement.offsetLeft, offsetTop = caretElement.offsetTop;
+      var offsetLeft = caretElement.offsetLeft, offsetTop = caretElement.offsetTop
       if (position.left !== offsetLeft || position.top !== offsetTop) {
         var newPosition = {
           left: offsetLeft,
           top: offsetTop
-        };
-        setPosition(newPosition), onCaretPositionChange(newPosition);
+        }
+        setPosition(newPosition), onCaretPositionChange(newPosition)
       }
     }
-  }, config = readConfigFromChildren(children);
-  selectionEnd === selectionStart && (caretPositionInMarkup = mapPlainTextIndex(value, config, selectionStart, "START"));
-  var resultComponents = [], componentKeys = {}, components = resultComponents, substringComponentKey = 0, renderSubstring = function(string, key) {
+  }, config = readConfigFromChildren(children)
+  selectionEnd === selectionStart && (caretPositionInMarkup = mapPlainTextIndex(value, config, selectionStart, "START"))
+  var resultComponents = [], componentKeys = {}, components = resultComponents, substringComponentKey = 0, renderSubstring = function (string, key) {
     return React__default.createElement("span", _extends({}, style("substring"), {
       key: key
-    }), string);
-  }, getMentionComponentForMatch = function(id, display, mentionChildIndex, key) {
+    }), string)
+  }, getMentionComponentForMatch = function (id, display, mentionChildIndex, key) {
     var props = {
       id: id,
       display: display,
       key: key
-    }, child = React.Children.toArray(children)[mentionChildIndex];
-    return React__default.cloneElement(child, props);
-  };
-  return iterateMentionsMarkup(value, config, function(markup, index, indexInPlainText, id, display, mentionChildIndex, lastMentionEndIndex) {
-    var key = _generateComponentKey(componentKeys, id);
-    components.push(getMentionComponentForMatch(id, display, mentionChildIndex, key));
-  }, function(substr, index, indexInPlainText) {
+    }, child = React.Children.toArray(children)[mentionChildIndex]
+    return React__default.cloneElement(child, props)
+  }
+  return iterateMentionsMarkup(value, config, function (markup, index, indexInPlainText, id, display, mentionChildIndex, lastMentionEndIndex) {
+    var key = _generateComponentKey(componentKeys, id)
+    components.push(getMentionComponentForMatch(id, display, mentionChildIndex, key))
+  }, function (substr, index, indexInPlainText) {
     if (isNumber(caretPositionInMarkup) && caretPositionInMarkup >= index && caretPositionInMarkup <= index + substr.length) {
-      var splitIndex = caretPositionInMarkup - index;
+      var splitIndex = caretPositionInMarkup - index
       components.push(renderSubstring(substr.substring(0, splitIndex), substringComponentKey)),
-      components = [ renderSubstring(substr.substring(splitIndex), substringComponentKey) ];
-    } else components.push(renderSubstring(substr, substringComponentKey));
-    substringComponentKey++;
-  }), components.push(" "), components !== resultComponents && resultComponents.push(function(children) {
+        components = [renderSubstring(substr.substring(splitIndex), substringComponentKey)]
+    } else components.push(renderSubstring(substr, substringComponentKey))
+    substringComponentKey++
+  }), components.push(" "), components !== resultComponents && resultComponents.push(function (children) {
     return React__default.createElement("span", _extends({}, style("caret"), {
       ref: setCaretElement,
       key: "caret"
-    }), children);
+    }), children)
   }(components)), React__default.createElement("div", _extends({}, style, {
     ref: containerRef
-  }), resultComponents);
+  }), resultComponents)
 }
 
 Highlighter.propTypes = {
@@ -527,11 +527,11 @@ Highlighter.propTypes = {
   selectionEnd: PropTypes.number,
   value: PropTypes.string.isRequired,
   onCaretPositionChange: PropTypes.func.isRequired,
-  containerRef: PropTypes.oneOfType([ PropTypes.func, PropTypes.shape({
+  containerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
     current: "undefined" == typeof Element ? PropTypes.any : PropTypes.instanceOf(Element)
-  }) ]),
-  children: PropTypes.oneOfType([ PropTypes.element, PropTypes.arrayOf(PropTypes.element) ]).isRequired
-};
+  })]),
+  children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]).isRequired
+}
 
 var styled = createDefaultStyle({
   position: "relative",
@@ -550,31 +550,31 @@ var styled = createDefaultStyle({
   substring: {
     visibility: "hidden"
   }
-}, function(props) {
+}, function (props) {
   return {
     "&singleLine": props.singleLine
-  };
-}), Highlighter$1 = styled(Highlighter);
+  }
+}), Highlighter$1 = styled(Highlighter)
 
 function Suggestion(_ref) {
   var display, highlightedDisplay, id = _ref.id, focused = _ref.focused, ignoreAccents = _ref.ignoreAccents, index = _ref.index, onClick = _ref.onClick, onMouseEnter = _ref.onMouseEnter, query = _ref.query, renderSuggestion = _ref.renderSuggestion, suggestion = _ref.suggestion, style = _ref.style, rest = (_ref.className,
-  _ref.classNames, {
+    _ref.classNames, {
     onClick: onClick,
     onMouseEnter: onMouseEnter
-  }), getDisplay = function() {
-    if ("string" == typeof suggestion) return suggestion;
-    var id = suggestion.id, display = suggestion.display;
-    return void 0 !== id && display ? display : id;
-  }, renderHighlightedDisplay = function(display) {
-    var i = getSubstringIndex(display, query, ignoreAccents);
-    return -1 === i ? React__default.createElement("span", style("display"), display) : React__default.createElement("span", style("display"), display.substring(0, i), React__default.createElement("b", style("highlight"), display.substring(i, i + query.length)), display.substring(i + query.length));
-  };
+  }), getDisplay = function () {
+    if ("string" == typeof suggestion) return suggestion
+    var id = suggestion.id, display = suggestion.display
+    return void 0 !== id && display ? display : id
+  }, renderHighlightedDisplay = function (display) {
+    var i = getSubstringIndex(display, query, ignoreAccents)
+    return -1 === i ? React__default.createElement("span", style("display"), display) : React__default.createElement("span", style("display"), display.substring(0, i), React__default.createElement("b", style("highlight"), display.substring(i, i + query.length)), display.substring(i + query.length))
+  }
   return React__default.createElement("li", _extends({
     id: id,
     role: "option",
     "aria-selected": focused
   }, rest, style), (display = getDisplay(), highlightedDisplay = renderHighlightedDisplay(display),
-  renderSuggestion ? renderSuggestion(suggestion, query, highlightedDisplay, index, focused) : highlightedDisplay));
+    renderSuggestion ? renderSuggestion(suggestion, query, highlightedDisplay, index, focused) : highlightedDisplay))
 }
 
 Suggestion.propTypes = {
@@ -582,45 +582,45 @@ Suggestion.propTypes = {
   query: PropTypes.string.isRequired,
   index: PropTypes.number.isRequired,
   ignoreAccents: PropTypes.bool,
-  suggestion: PropTypes.oneOfType([ PropTypes.string, PropTypes.shape({
-    id: PropTypes.oneOfType([ PropTypes.string, PropTypes.number ]).isRequired,
+  suggestion: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({
+    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
     display: PropTypes.string
-  }) ]).isRequired,
+  })]).isRequired,
   renderSuggestion: PropTypes.func,
   focused: PropTypes.bool
-};
+}
 
 var styled$1 = createDefaultStyle({
   cursor: "pointer"
-}, function(props) {
+}, function (props) {
   return {
     "&focused": props.focused
-  };
-}), Suggestion$1 = styled$1(Suggestion);
+  }
+}), Suggestion$1 = styled$1(Suggestion)
 
 function LoadingIndicator(_ref) {
   var style = _ref.style, className = _ref.className, classNames = _ref.classNames, styles = useStyles__default(defaultstyle, {
     style: style,
     className: className,
     classNames: classNames
-  }), spinnerStyles = styles("spinner");
-  return React__default.createElement("div", styles, React__default.createElement("div", spinnerStyles, React__default.createElement("div", spinnerStyles([ "element", "element1" ])), React__default.createElement("div", spinnerStyles([ "element", "element2" ])), React__default.createElement("div", spinnerStyles([ "element", "element3" ])), React__default.createElement("div", spinnerStyles([ "element", "element4" ])), React__default.createElement("div", spinnerStyles([ "element", "element5" ]))));
+  }), spinnerStyles = styles("spinner")
+  return React__default.createElement("div", styles, React__default.createElement("div", spinnerStyles, React__default.createElement("div", spinnerStyles(["element", "element1"])), React__default.createElement("div", spinnerStyles(["element", "element2"])), React__default.createElement("div", spinnerStyles(["element", "element3"])), React__default.createElement("div", spinnerStyles(["element", "element4"])), React__default.createElement("div", spinnerStyles(["element", "element5"]))))
 }
 
-var defaultstyle = {};
+var defaultstyle = {}
 
 function SuggestionsOverlay(_ref) {
-  var id = _ref.id, _ref$suggestions = _ref.suggestions, suggestions = void 0 === _ref$suggestions ? {} : _ref$suggestions, a11ySuggestionsListLabel = _ref.a11ySuggestionsListLabel, focusIndex = _ref.focusIndex, position = _ref.position, left = _ref.left, right = _ref.right, top = _ref.top, scrollFocusedIntoView = _ref.scrollFocusedIntoView, isLoading = _ref.isLoading, isOpened = _ref.isOpened, _ref$onSelect = _ref.onSelect, onSelect = void 0 === _ref$onSelect ? function() {
-    return null;
-  } : _ref$onSelect, ignoreAccents = _ref.ignoreAccents, containerRef = _ref.containerRef, children = _ref.children, style = _ref.style, customSuggestionsContainer = _ref.customSuggestionsContainer, onMouseDown = _ref.onMouseDown, onMouseEnter = _ref.onMouseEnter, _useState = React.useState(void 0), _useState2 = _slicedToArray(_useState, 2), ulElement = _useState2[0], setUlElement = _useState2[1];
-  React.useEffect(function() {
+  var id = _ref.id, _ref$suggestions = _ref.suggestions, suggestions = void 0 === _ref$suggestions ? {} : _ref$suggestions, a11ySuggestionsListLabel = _ref.a11ySuggestionsListLabel, focusIndex = _ref.focusIndex, position = _ref.position, left = _ref.left, right = _ref.right, top = _ref.top, scrollFocusedIntoView = _ref.scrollFocusedIntoView, isLoading = _ref.isLoading, isOpened = _ref.isOpened, _ref$onSelect = _ref.onSelect, onSelect = void 0 === _ref$onSelect ? function () {
+    return null
+  } : _ref$onSelect, ignoreAccents = _ref.ignoreAccents, containerRef = _ref.containerRef, children = _ref.children, style = _ref.style, customSuggestionsContainer = _ref.customSuggestionsContainer, onMouseDown = _ref.onMouseDown, onMouseEnter = _ref.onMouseEnter, _useState = React.useState(void 0), _useState2 = _slicedToArray(_useState, 2), ulElement = _useState2[0], setUlElement = _useState2[1]
+  React.useEffect(function () {
     if (ulElement && !(ulElement.offsetHeight >= ulElement.scrollHeight) && scrollFocusedIntoView) {
-      var scrollTop = ulElement.scrollTop, _ulElement$children$f = ulElement.children[focusIndex].getBoundingClientRect(), top = _ulElement$children$f.top, bottom = _ulElement$children$f.bottom, topContainer = ulElement.getBoundingClientRect().top;
-      bottom = bottom - topContainer + scrollTop, (top = top - topContainer + scrollTop) < scrollTop ? ulElement.scrollTop = top : bottom > ulElement.offsetHeight && (ulElement.scrollTop = bottom - ulElement.offsetHeight);
+      var scrollTop = ulElement.scrollTop, _ulElement$children$f = ulElement.children[focusIndex].getBoundingClientRect(), top = _ulElement$children$f.top, bottom = _ulElement$children$f.bottom, topContainer = ulElement.getBoundingClientRect().top
+      bottom = bottom - topContainer + scrollTop, (top = top - topContainer + scrollTop) < scrollTop ? ulElement.scrollTop = top : bottom > ulElement.offsetHeight && (ulElement.scrollTop = bottom - ulElement.offsetHeight)
     }
-  }, [ focusIndex, scrollFocusedIntoView, ulElement ]);
-  var suggestionsToRender, renderSuggestion = function(result, queryInfo, index) {
-    var isFocused = index === focusIndex, childIndex = queryInfo.childIndex, query = queryInfo.query, renderSuggestion = React.Children.toArray(children)[childIndex].props.renderSuggestion;
+  }, [focusIndex, scrollFocusedIntoView, ulElement])
+  var suggestionsToRender, renderSuggestion = function (result, queryInfo, index) {
+    var isFocused = index === focusIndex, childIndex = queryInfo.childIndex, query = queryInfo.query, renderSuggestion = React.Children.toArray(children)[childIndex].props.renderSuggestion
     return React__default.createElement(Suggestion$1, {
       style: style("item"),
       key: "".concat(childIndex, "-").concat(getID(result)),
@@ -631,20 +631,20 @@ function SuggestionsOverlay(_ref) {
       renderSuggestion: renderSuggestion,
       suggestion: result,
       focused: isFocused,
-      onClick: function() {
-        return select(result, queryInfo);
+      onClick: function () {
+        return select(result, queryInfo)
       },
-      onMouseEnter: function() {
-        return handleMouseEnter(index);
+      onMouseEnter: function () {
+        return handleMouseEnter(index)
       }
-    });
-  }, handleMouseEnter = function(index, ev) {
-    onMouseEnter && onMouseEnter(index);
-  }, select = function(suggestion, queryInfo) {
-    onSelect(suggestion, queryInfo);
-  }, getID = function(suggestion) {
-    return "string" == typeof suggestion ? suggestion : suggestion.id;
-  };
+    })
+  }, handleMouseEnter = function (index, ev) {
+    onMouseEnter && onMouseEnter(index)
+  }, select = function (suggestion, queryInfo) {
+    onSelect(suggestion, queryInfo)
+  }, getID = function (suggestion) {
+    return "string" == typeof suggestion ? suggestion : suggestion.id
+  }
   return isOpened ? React__default.createElement("div", _extends({}, useStyles.inline({
     position: position || "absolute",
     left: left,
@@ -658,16 +658,16 @@ function SuggestionsOverlay(_ref) {
     id: id,
     role: "listbox",
     "aria-label": a11ySuggestionsListLabel
-  }, style("list")), Object.values(suggestions).reduce(function(accResults, _ref2) {
-    var results = _ref2.results, queryInfo = _ref2.queryInfo;
-    return [].concat(_toConsumableArray(accResults), _toConsumableArray(results.map(function(result, index) {
-      return renderSuggestion(result, queryInfo, accResults.length + index);
-    })));
-  }, [])), customSuggestionsContainer ? customSuggestionsContainer(suggestionsToRender) : suggestionsToRender), function() {
+  }, style("list")), Object.values(suggestions).reduce(function (accResults, _ref2) {
+    var results = _ref2.results, queryInfo = _ref2.queryInfo
+    return [].concat(_toConsumableArray(accResults), _toConsumableArray(results.map(function (result, index) {
+      return renderSuggestion(result, queryInfo, accResults.length + index)
+    })))
+  }, [])), customSuggestionsContainer ? customSuggestionsContainer(suggestionsToRender) : suggestionsToRender), function () {
     if (isLoading) return React__default.createElement(LoadingIndicator, {
       style: style("loadingIndicator")
-    });
-  }()) : null;
+    })
+  }()) : null
 }
 
 SuggestionsOverlay.propTypes = {
@@ -685,10 +685,10 @@ SuggestionsOverlay.propTypes = {
   onSelect: PropTypes.func,
   ignoreAccents: PropTypes.bool,
   customSuggestionsContainer: PropTypes.func,
-  containerRef: PropTypes.oneOfType([ PropTypes.func, PropTypes.shape({
+  containerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
     current: "undefined" == typeof Element ? PropTypes.any : PropTypes.instanceOf(Element)
-  }) ])
-};
+  })])
+}
 
 var styled$2 = createDefaultStyle({
   zIndex: 1,
@@ -700,68 +700,68 @@ var styled$2 = createDefaultStyle({
     padding: 0,
     listStyleType: "none"
   }
-}), SuggestionsOverlay$1 = styled$2(SuggestionsOverlay);
+}), SuggestionsOverlay$1 = styled$2(SuggestionsOverlay)
 
 function ownKeys$1(object, enumerableOnly) {
-  var keys = Object.keys(object);
+  var keys = Object.keys(object)
   if (Object.getOwnPropertySymbols) {
-    var symbols = Object.getOwnPropertySymbols(object);
-    enumerableOnly && (symbols = symbols.filter(function(sym) {
-      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
-    })), keys.push.apply(keys, symbols);
+    var symbols = Object.getOwnPropertySymbols(object)
+    enumerableOnly && (symbols = symbols.filter(function (sym) {
+      return Object.getOwnPropertyDescriptor(object, sym).enumerable
+    })), keys.push.apply(keys, symbols)
   }
-  return keys;
+  return keys
 }
 
 function _objectSpread$1(target) {
   for (var i = 1; i < arguments.length; i++) {
-    var source = null != arguments[i] ? arguments[i] : {};
-    i % 2 ? ownKeys$1(Object(source), !0).forEach(function(key) {
-      _defineProperty(target, key, source[key]);
-    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {
-      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
-    });
+    var source = null != arguments[i] ? arguments[i] : {}
+    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {
+      _defineProperty(target, key, source[key])
+    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {
+      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))
+    })
   }
-  return target;
+  return target
 }
 
 function _createSuper(Derived) {
-  var hasNativeReflectConstruct = _isNativeReflectConstruct();
-  return function() {
-    var result, Super = _getPrototypeOf(Derived);
+  var hasNativeReflectConstruct = _isNativeReflectConstruct()
+  return function () {
+    var result, Super = _getPrototypeOf(Derived)
     if (hasNativeReflectConstruct) {
-      var NewTarget = _getPrototypeOf(this).constructor;
-      result = Reflect.construct(Super, arguments, NewTarget);
-    } else result = Super.apply(this, arguments);
-    return _possibleConstructorReturn(this, result);
-  };
+      var NewTarget = _getPrototypeOf(this).constructor
+      result = Reflect.construct(Super, arguments, NewTarget)
+    } else result = Super.apply(this, arguments)
+    return _possibleConstructorReturn(this, result)
+  }
 }
 
 function _isNativeReflectConstruct() {
-  if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
-  if (Reflect.construct.sham) return !1;
-  if ("function" == typeof Proxy) return !0;
+  if ("undefined" == typeof Reflect || !Reflect.construct) return !1
+  if (Reflect.construct.sham) return !1
+  if ("function" == typeof Proxy) return !0
   try {
-    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})), 
-    !0;
+    return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { })),
+      !0
   } catch (e) {
-    return !1;
+    return !1
   }
 }
 
-var makeTriggerRegex = function(trigger) {
-  var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
-  if (trigger instanceof RegExp) return trigger;
-  var allowSpaceInQuery = options.allowSpaceInQuery, escapedTriggerChar = escapeRegex(trigger);
-  return new RegExp("(?:^|\\s)(".concat(escapedTriggerChar, "([^").concat(allowSpaceInQuery ? "" : "\\s").concat(escapedTriggerChar, "]*))$"));
-}, getDataProvider = function(data, ignoreAccents) {
-  return data instanceof Array ? function(query, callback) {
+var makeTriggerRegex = function (trigger) {
+  var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
+  if (trigger instanceof RegExp) return trigger
+  var allowSpaceInQuery = options.allowSpaceInQuery, escapedTriggerChar = escapeRegex(trigger)
+  return new RegExp("(?:^|\\s)(".concat(escapedTriggerChar, "([^").concat(allowSpaceInQuery ? "" : "\\s").concat(escapedTriggerChar, "]*))$"))
+}, getDataProvider = function (data, ignoreAccents) {
+  return data instanceof Array ? function (query, callback) {
     for (var results = [], i = 0, l = data.length; i < l; ++i) {
-      var display = data[i].display || data[i].id;
-      getSubstringIndex(display, query, ignoreAccents) >= 0 && results.push(data[i]);
+      var display = data[i].display || data[i].id
+      getSubstringIndex(display, query, ignoreAccents) >= 0 && results.push(data[i])
     }
-    return results;
-  } : data;
+    return results
+  } : data
 }, KEY = {
   TAB: 9,
   RETURN: 13,
@@ -782,418 +782,418 @@ var makeTriggerRegex = function(trigger) {
   onBlur: PropTypes.func,
   onChange: PropTypes.func,
   suggestionsPortalHost: "undefined" == typeof Element ? PropTypes.any : PropTypes.PropTypes.instanceOf(Element),
-  inputRef: PropTypes.oneOfType([ PropTypes.func, PropTypes.shape({
+  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
     current: "undefined" == typeof Element ? PropTypes.any : PropTypes.instanceOf(Element)
-  }) ]),
-  children: PropTypes.oneOfType([ PropTypes.element, PropTypes.arrayOf(PropTypes.element) ]).isRequired
-}, MentionsInput = function(_React$Component) {
-  _inherits(MentionsInput, _React$Component);
-  var _super = _createSuper(MentionsInput);
+  })]),
+  children: PropTypes.oneOfType([PropTypes.element, PropTypes.arrayOf(PropTypes.element)]).isRequired
+}, MentionsInput = function (_React$Component) {
+  _inherits(MentionsInput, _React$Component)
+  var _super = _createSuper(MentionsInput)
   function MentionsInput(_props) {
-    var _this;
+    var _this
     return _classCallCheck(this, MentionsInput), _this = _super.call(this, _props),
-    _defineProperty(_assertThisInitialized(_this), "setContainerElement", function(el) {
-      _this.containerElement = el;
-    }), _defineProperty(_assertThisInitialized(_this), "getInputProps", function() {
-      var _this$props = _this.props, readOnly = _this$props.readOnly, disabled = _this$props.disabled, style = _this$props.style;
-      return _objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1({}, omit(_this.props, [ "style", "classNames", "className" ], keys(propTypes))), style("input")), {}, {
-        value: _this.getPlainText(),
-        onScroll: _this.updateHighlighterScroll
-      }, !readOnly && !disabled && {
-        onChange: _this.handleChange,
-        onSelect: _this.handleSelect,
-        onKeyDown: _this.handleKeyDown,
-        onBlur: _this.handleBlur,
-        onCompositionStart: _this.handleCompositionStart,
-        onCompositionEnd: _this.handleCompositionEnd
-      }), _this.isOpened() && {
-        role: "combobox",
-        "aria-controls": _this.uuidSuggestionsOverlay,
-        "aria-expanded": !0,
-        "aria-autocomplete": "list",
-        "aria-haspopup": "listbox",
-        "aria-activedescendant": getSuggestionHtmlId(_this.uuidSuggestionsOverlay, _this.state.focusIndex)
-      });
-    }), _defineProperty(_assertThisInitialized(_this), "renderControl", function() {
-      var _this$props2 = _this.props, singleLine = _this$props2.singleLine, style = _this$props2.style, inputProps = _this.getInputProps();
-      return React__default.createElement("div", style("control"), _this.renderHighlighter(), singleLine ? _this.renderInput(inputProps) : _this.renderTextarea(inputProps));
-    }), _defineProperty(_assertThisInitialized(_this), "renderInput", function(props) {
-      return React__default.createElement("input", _extends({
-        type: "text",
-        ref: _this.setInputRef
-      }, props));
-    }), _defineProperty(_assertThisInitialized(_this), "renderTextarea", function(props) {
-      return React__default.createElement("textarea", _extends({
-        ref: _this.setInputRef
-      }, props));
-    }), _defineProperty(_assertThisInitialized(_this), "setInputRef", function(el) {
-      _this.inputElement = el;
-      var inputRef = _this.props.inputRef;
-      "function" == typeof inputRef ? inputRef(el) : inputRef && (inputRef.current = el);
-    }), _defineProperty(_assertThisInitialized(_this), "setSuggestionsElement", function(el) {
-      _this.suggestionsElement = el;
-    }), _defineProperty(_assertThisInitialized(_this), "renderSuggestionsOverlay", function() {
-      if (!isNumber(_this.state.selectionStart)) return null;
-      var _this$state$suggestio = _this.state.suggestionsPosition, position = _this$state$suggestio.position, left = _this$state$suggestio.left, top = _this$state$suggestio.top, right = _this$state$suggestio.right, suggestionsNode = React__default.createElement(SuggestionsOverlay$1, {
-        id: _this.uuidSuggestionsOverlay,
-        style: _this.props.style("suggestions"),
-        position: position,
-        left: left,
-        top: top,
-        right: right,
-        focusIndex: _this.state.focusIndex,
-        scrollFocusedIntoView: _this.state.scrollFocusedIntoView,
-        containerRef: _this.setSuggestionsElement,
-        suggestions: _this.state.suggestions,
-        customSuggestionsContainer: _this.props.customSuggestionsContainer,
-        onSelect: _this.addMention,
-        onMouseDown: _this.handleSuggestionsMouseDown,
-        onMouseEnter: _this.handleSuggestionsMouseEnter,
-        isLoading: _this.isLoading(),
-        isOpened: _this.isOpened(),
-        ignoreAccents: _this.props.ignoreAccents,
-        a11ySuggestionsListLabel: _this.props.a11ySuggestionsListLabel
-      }, _this.props.children);
-      return _this.props.suggestionsPortalHost ? ReactDOM.createPortal(suggestionsNode, _this.props.suggestionsPortalHost) : suggestionsNode;
-    }), _defineProperty(_assertThisInitialized(_this), "renderHighlighter", function() {
-      var _this$state = _this.state, selectionStart = _this$state.selectionStart, selectionEnd = _this$state.selectionEnd, _this$props3 = _this.props, singleLine = _this$props3.singleLine, children = _this$props3.children, value = _this$props3.value, style = _this$props3.style;
-      return React__default.createElement(Highlighter$1, {
-        containerRef: _this.setHighlighterElement,
-        style: style("highlighter"),
-        value: value,
-        singleLine: singleLine,
-        selectionStart: selectionStart,
-        selectionEnd: selectionEnd,
-        onCaretPositionChange: _this.handleCaretPositionChange
-      }, children);
-    }), _defineProperty(_assertThisInitialized(_this), "setHighlighterElement", function(el) {
-      _this.highlighterElement = el;
-    }), _defineProperty(_assertThisInitialized(_this), "handleCaretPositionChange", function(position) {
-      _this.setState({
-        caretPosition: position
-      });
-    }), _defineProperty(_assertThisInitialized(_this), "getPlainText", function() {
-      return getPlainText(_this.props.value || "", readConfigFromChildren(_this.props.children));
-    }), _defineProperty(_assertThisInitialized(_this), "executeOnChange", function(event) {
-      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) args[_key - 1] = arguments[_key];
-      var _this$props4, _this$props$valueLink;
-      return _this.props.onChange ? (_this$props4 = _this.props).onChange.apply(_this$props4, [ event ].concat(args)) : _this.props.valueLink ? (_this$props$valueLink = _this.props.valueLink).requestChange.apply(_this$props$valueLink, [ event.target.value ].concat(args)) : void 0;
-    }), _defineProperty(_assertThisInitialized(_this), "handleChange", function(ev) {
-      if ((isComposing = !1, isIE()) && (document.activeElement && document.activeElement.contentDocument || document).activeElement !== ev.target) return;
-      var value = _this.props.value || "", config = readConfigFromChildren(_this.props.children), newPlainTextValue = ev.target.value, selectionStartBefore = _this.state.selectionStart;
-      null == selectionStartBefore && (selectionStartBefore = ev.target.selectionStart);
-      var selectionEndBefore = _this.state.selectionEnd;
-      null == selectionEndBefore && (selectionEndBefore = ev.target.selectionEnd);
-      var newValue = applyChangeToValue(value, newPlainTextValue, {
-        selectionStartBefore: selectionStartBefore,
-        selectionEndBefore: selectionEndBefore,
-        selectionEndAfter: ev.target.selectionEnd
-      }, config);
-      newPlainTextValue = getPlainText(newValue, config);
-      var selectionStart = ev.target.selectionStart, selectionEnd = ev.target.selectionEnd, setSelectionAfterMentionChange = !1, startOfMention = findStartOfMentionInPlainText(value, config, selectionStart);
-      void 0 !== startOfMention && _this.state.selectionEnd > startOfMention && (selectionEnd = selectionStart = startOfMention + (ev.nativeEvent.data ? ev.nativeEvent.data.length : 0), 
-      setSelectionAfterMentionChange = !0), _this.setState({
-        selectionStart: selectionStart,
-        selectionEnd: selectionEnd,
-        setSelectionAfterMentionChange: setSelectionAfterMentionChange
-      });
-      var mentions = getMentions(newValue, config);
-      ev.nativeEvent.isComposing && selectionStart === selectionEnd && _this.updateMentionsQueries(_this.inputElement.value, selectionStart);
-      var eventMock = {
-        target: {
-          value: newValue
+      _defineProperty(_assertThisInitialized(_this), "setContainerElement", function (el) {
+        _this.containerElement = el
+      }), _defineProperty(_assertThisInitialized(_this), "getInputProps", function () {
+        var _this$props = _this.props, readOnly = _this$props.readOnly, disabled = _this$props.disabled, style = _this$props.style
+        return _objectSpread$1(_objectSpread$1(_objectSpread$1(_objectSpread$1({}, omit(_this.props, ["style", "classNames", "className"], keys(propTypes))), style("input")), {}, {
+          value: _this.getPlainText(),
+          onScroll: _this.updateHighlighterScroll
+        }, !readOnly && !disabled && {
+          onChange: _this.handleChange,
+          onSelect: _this.handleSelect,
+          onKeyDown: _this.handleKeyDown,
+          onBlur: _this.handleBlur,
+          onCompositionStart: _this.handleCompositionStart,
+          onCompositionEnd: _this.handleCompositionEnd
+        }), _this.isOpened() && {
+          role: "combobox",
+          "aria-controls": _this.uuidSuggestionsOverlay,
+          "aria-expanded": !0,
+          "aria-autocomplete": "list",
+          "aria-haspopup": "listbox",
+          "aria-activedescendant": getSuggestionHtmlId(_this.uuidSuggestionsOverlay, _this.state.focusIndex)
+        })
+      }), _defineProperty(_assertThisInitialized(_this), "renderControl", function () {
+        var _this$props2 = _this.props, singleLine = _this$props2.singleLine, style = _this$props2.style, inputProps = _this.getInputProps()
+        return React__default.createElement("div", style("control"), _this.renderHighlighter(), singleLine ? _this.renderInput(inputProps) : _this.renderTextarea(inputProps))
+      }), _defineProperty(_assertThisInitialized(_this), "renderInput", function (props) {
+        return React__default.createElement("input", _extends({
+          type: "text",
+          ref: _this.setInputRef
+        }, props))
+      }), _defineProperty(_assertThisInitialized(_this), "renderTextarea", function (props) {
+        return React__default.createElement("textarea", _extends({
+          ref: _this.setInputRef
+        }, props))
+      }), _defineProperty(_assertThisInitialized(_this), "setInputRef", function (el) {
+        _this.inputElement = el
+        var inputRef = _this.props.inputRef
+        "function" == typeof inputRef ? inputRef(el) : inputRef && (inputRef.current = el)
+      }), _defineProperty(_assertThisInitialized(_this), "setSuggestionsElement", function (el) {
+        _this.suggestionsElement = el
+      }), _defineProperty(_assertThisInitialized(_this), "renderSuggestionsOverlay", function () {
+        if (!isNumber(_this.state.selectionStart)) return null
+        var _this$state$suggestio = _this.state.suggestionsPosition, position = _this$state$suggestio.position, left = _this$state$suggestio.left, top = _this$state$suggestio.top, right = _this$state$suggestio.right, suggestionsNode = React__default.createElement(SuggestionsOverlay$1, {
+          id: _this.uuidSuggestionsOverlay,
+          style: _this.props.style("suggestions"),
+          position: position,
+          left: left,
+          top: top,
+          right: right,
+          focusIndex: _this.state.focusIndex,
+          scrollFocusedIntoView: _this.state.scrollFocusedIntoView,
+          containerRef: _this.setSuggestionsElement,
+          suggestions: _this.state.suggestions,
+          customSuggestionsContainer: _this.props.customSuggestionsContainer,
+          onSelect: _this.addMention,
+          onMouseDown: _this.handleSuggestionsMouseDown,
+          onMouseEnter: _this.handleSuggestionsMouseEnter,
+          isLoading: _this.isLoading(),
+          isOpened: _this.isOpened(),
+          ignoreAccents: _this.props.ignoreAccents,
+          a11ySuggestionsListLabel: _this.props.a11ySuggestionsListLabel
+        }, _this.props.children)
+        return _this.props.suggestionsPortalHost ? ReactDOM.createPortal(suggestionsNode, _this.props.suggestionsPortalHost) : suggestionsNode
+      }), _defineProperty(_assertThisInitialized(_this), "renderHighlighter", function () {
+        var _this$state = _this.state, selectionStart = _this$state.selectionStart, selectionEnd = _this$state.selectionEnd, _this$props3 = _this.props, singleLine = _this$props3.singleLine, children = _this$props3.children, value = _this$props3.value, style = _this$props3.style
+        return React__default.createElement(Highlighter$1, {
+          containerRef: _this.setHighlighterElement,
+          style: style("highlighter"),
+          value: value,
+          singleLine: singleLine,
+          selectionStart: selectionStart,
+          selectionEnd: selectionEnd,
+          onCaretPositionChange: _this.handleCaretPositionChange
+        }, children)
+      }), _defineProperty(_assertThisInitialized(_this), "setHighlighterElement", function (el) {
+        _this.highlighterElement = el
+      }), _defineProperty(_assertThisInitialized(_this), "handleCaretPositionChange", function (position) {
+        _this.setState({
+          caretPosition: position
+        })
+      }), _defineProperty(_assertThisInitialized(_this), "getPlainText", function () {
+        return getPlainText(_this.props.value || "", readConfigFromChildren(_this.props.children))
+      }), _defineProperty(_assertThisInitialized(_this), "executeOnChange", function (event) {
+        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) args[_key - 1] = arguments[_key]
+        var _this$props4, _this$props$valueLink
+        return _this.props.onChange ? (_this$props4 = _this.props).onChange.apply(_this$props4, [event].concat(args)) : _this.props.valueLink ? (_this$props$valueLink = _this.props.valueLink).requestChange.apply(_this$props$valueLink, [event.target.value].concat(args)) : void 0
+      }), _defineProperty(_assertThisInitialized(_this), "handleChange", function (ev) {
+        if ((isComposing = !1, isIE()) && (document.activeElement && document.activeElement.contentDocument || document).activeElement !== ev.target) return
+        var value = _this.props.value || "", config = readConfigFromChildren(_this.props.children), newPlainTextValue = ev.target.value, selectionStartBefore = _this.state.selectionStart
+        null == selectionStartBefore && (selectionStartBefore = ev.target.selectionStart)
+        var selectionEndBefore = _this.state.selectionEnd
+        null == selectionEndBefore && (selectionEndBefore = ev.target.selectionEnd)
+        var newValue = applyChangeToValue(value, newPlainTextValue, {
+          selectionStartBefore: selectionStartBefore,
+          selectionEndBefore: selectionEndBefore,
+          selectionEndAfter: ev.target.selectionEnd
+        }, config)
+        newPlainTextValue = getPlainText(newValue, config)
+        var selectionStart = ev.target.selectionStart, selectionEnd = ev.target.selectionEnd, setSelectionAfterMentionChange = !1, startOfMention = findStartOfMentionInPlainText(value, config, selectionStart)
+        void 0 !== startOfMention && _this.state.selectionEnd > startOfMention && (selectionEnd = selectionStart = startOfMention + (ev.nativeEvent.data ? ev.nativeEvent.data.length : 0),
+          setSelectionAfterMentionChange = !0), _this.setState({
+            selectionStart: selectionStart,
+            selectionEnd: selectionEnd,
+            setSelectionAfterMentionChange: setSelectionAfterMentionChange
+          })
+        var mentions = getMentions(newValue, config)
+        ev.nativeEvent.isComposing && selectionStart === selectionEnd && _this.updateMentionsQueries(_this.inputElement.value, selectionStart)
+        var eventMock = {
+          target: {
+            value: newValue
+          }
         }
-      };
-      _this.executeOnChange(eventMock, newValue, newPlainTextValue, mentions);
-    }), _defineProperty(_assertThisInitialized(_this), "handleSelect", function(ev) {
-      if (_this.setState({
-        selectionStart: ev.target.selectionStart,
-        selectionEnd: ev.target.selectionEnd
-      }), !isComposing) {
-        var el = _this.inputElement;
-        ev.target.selectionStart === ev.target.selectionEnd ? _this.updateMentionsQueries(el.value, ev.target.selectionStart) : _this.clearSuggestions(), 
-        _this.updateHighlighterScroll(), _this.props.onSelect(ev);
-      }
-    }), _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function(ev) {
-      if (0 !== countSuggestions(_this.state.suggestions) && _this.suggestionsElement) switch (Object.values(KEY).indexOf(ev.keyCode) >= 0 && (ev.preventDefault(), 
-      ev.stopPropagation()), ev.keyCode) {
-       case KEY.ESC:
-        return void _this.clearSuggestions();
+        _this.executeOnChange(eventMock, newValue, newPlainTextValue, mentions)
+      }), _defineProperty(_assertThisInitialized(_this), "handleSelect", function (ev) {
+        if (_this.setState({
+          selectionStart: ev.target.selectionStart,
+          selectionEnd: ev.target.selectionEnd
+        }), !isComposing && (!_this.state.disallowSelect || ev.target.selectionStart === 0)) {
+          var el = _this.inputElement
+          ev.target.selectionStart === ev.target.selectionEnd ? _this.updateMentionsQueries(el.value, ev.target.selectionStart) : _this.clearSuggestions(),
+            _this.updateHighlighterScroll(), _this.props.onSelect(ev)
+        }
+      }), _defineProperty(_assertThisInitialized(_this), "handleKeyDown", function (ev) {
+        if (0 !== countSuggestions(_this.state.suggestions) && _this.suggestionsElement) switch (Object.values(KEY).indexOf(ev.keyCode) >= 0 && (ev.preventDefault(),
+          ev.stopPropagation()), ev.keyCode) {
+            case KEY.ESC:
+              return void _this.clearSuggestions()
 
-       case KEY.DOWN:
-        return void _this.shiftFocus(1);
+            case KEY.DOWN:
+              return void _this.shiftFocus(1)
 
-       case KEY.UP:
-        return void _this.shiftFocus(-1);
+            case KEY.UP:
+              return void _this.shiftFocus(-1)
 
-       case KEY.RETURN:
-       case KEY.TAB:
-        return void _this.selectFocused();
+            case KEY.RETURN:
+            case KEY.TAB:
+              return void _this.selectFocused()
 
-       default:
-        return;
-      } else _this.props.onKeyDown(ev);
-    }), _defineProperty(_assertThisInitialized(_this), "shiftFocus", function(delta) {
-      var suggestionsCount = countSuggestions(_this.state.suggestions);
-      _this.setState({
-        focusIndex: (suggestionsCount + _this.state.focusIndex + delta) % suggestionsCount,
-        scrollFocusedIntoView: !0
-      });
-    }), _defineProperty(_assertThisInitialized(_this), "selectFocused", function() {
-      var _this$state2 = _this.state, suggestions = _this$state2.suggestions, focusIndex = _this$state2.focusIndex, _Object$values$reduce = Object.values(suggestions).reduce(function(acc, _ref) {
-        var results = _ref.results, queryInfo = _ref.queryInfo;
-        return [].concat(_toConsumableArray(acc), _toConsumableArray(results.map(function(result) {
-          return {
-            result: result,
-            queryInfo: queryInfo
-          };
-        })));
-      }, [])[focusIndex], result = _Object$values$reduce.result, queryInfo = _Object$values$reduce.queryInfo;
-      _this.addMention(result, queryInfo), _this.setState({
-        focusIndex: 0
-      });
-    }), _defineProperty(_assertThisInitialized(_this), "handleBlur", function(ev) {
-      var clickedSuggestion = _this._suggestionsMouseDown;
-      _this._suggestionsMouseDown = !1, clickedSuggestion || _this.setState({
-        selectionStart: null,
-        selectionEnd: null
-      }), window.setTimeout(function() {
-        _this.updateHighlighterScroll();
-      }, 1), _this.props.onBlur(ev, clickedSuggestion);
-    }), _defineProperty(_assertThisInitialized(_this), "handleSuggestionsMouseDown", function(ev) {
-      _this._suggestionsMouseDown = !0;
-    }), _defineProperty(_assertThisInitialized(_this), "handleSuggestionsMouseEnter", function(focusIndex) {
-      _this.setState({
-        focusIndex: focusIndex,
-        scrollFocusedIntoView: !1
-      });
-    }), _defineProperty(_assertThisInitialized(_this), "updateSuggestionsPosition", function() {
-      var caretPosition = _this.state.caretPosition, _this$props5 = _this.props, suggestionsPortalHost = _this$props5.suggestionsPortalHost, allowSuggestionsAboveCursor = _this$props5.allowSuggestionsAboveCursor, forceSuggestionsAboveCursor = _this$props5.forceSuggestionsAboveCursor;
-      if (caretPosition && _this.suggestionsElement) {
-        var suggestions = _this.suggestionsElement, highlighter = _this.highlighterElement, caretOffsetParentRect = highlighter.getBoundingClientRect(), caretHeight = getComputedStyleLengthProp(highlighter, "font-size"), viewportRelative = {
-          left: caretOffsetParentRect.left + caretPosition.left,
-          top: caretOffsetParentRect.top + caretPosition.top + caretHeight
-        }, viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
-        if (suggestions) {
-          var position = {};
-          if (suggestionsPortalHost) {
-            position.position = "fixed";
-            var left = viewportRelative.left, top = viewportRelative.top;
-            left -= getComputedStyleLengthProp(suggestions, "margin-left"), top -= getComputedStyleLengthProp(suggestions, "margin-top"), 
-            left -= highlighter.scrollLeft, top -= highlighter.scrollTop;
-            var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
-            left + suggestions.offsetWidth > viewportWidth ? position.left = Math.max(0, viewportWidth - suggestions.offsetWidth) : position.left = left, 
-            allowSuggestionsAboveCursor && top + suggestions.offsetHeight > viewportHeight && suggestions.offsetHeight < top - caretHeight || forceSuggestionsAboveCursor ? position.top = Math.max(0, top - suggestions.offsetHeight - caretHeight) : position.top = top;
-          } else {
-            var _left = caretPosition.left - highlighter.scrollLeft, _top = caretPosition.top - highlighter.scrollTop;
-            _left + suggestions.offsetWidth > _this.containerElement.offsetWidth ? position.right = 0 : position.left = _left, 
-            allowSuggestionsAboveCursor && viewportRelative.top - highlighter.scrollTop + suggestions.offsetHeight > viewportHeight && suggestions.offsetHeight < caretOffsetParentRect.top - caretHeight - highlighter.scrollTop || forceSuggestionsAboveCursor ? position.top = _top - suggestions.offsetHeight - caretHeight : position.top = _top;
+            default:
+              return
+          } else _this.props.onKeyDown(ev)
+      }), _defineProperty(_assertThisInitialized(_this), "shiftFocus", function (delta) {
+        var suggestionsCount = countSuggestions(_this.state.suggestions)
+        _this.setState({
+          focusIndex: (suggestionsCount + _this.state.focusIndex + delta) % suggestionsCount,
+          scrollFocusedIntoView: !0
+        })
+      }), _defineProperty(_assertThisInitialized(_this), "selectFocused", function () {
+        var _this$state2 = _this.state, suggestions = _this$state2.suggestions, focusIndex = _this$state2.focusIndex, _Object$values$reduce = Object.values(suggestions).reduce(function (acc, _ref) {
+          var results = _ref.results, queryInfo = _ref.queryInfo
+          return [].concat(_toConsumableArray(acc), _toConsumableArray(results.map(function (result) {
+            return {
+              result: result,
+              queryInfo: queryInfo
+            }
+          })))
+        }, [])[focusIndex], result = _Object$values$reduce.result, queryInfo = _Object$values$reduce.queryInfo
+        _this.addMention(result, queryInfo), _this.setState({
+          focusIndex: 0
+        })
+      }), _defineProperty(_assertThisInitialized(_this), "handleBlur", function (ev) {
+        var clickedSuggestion = _this._suggestionsMouseDown
+        _this._suggestionsMouseDown = !1, clickedSuggestion || _this.setState({
+          selectionStart: null,
+          selectionEnd: null
+        }), window.setTimeout(function () {
+          _this.updateHighlighterScroll()
+        }, 1), _this.props.onBlur(ev, clickedSuggestion)
+      }), _defineProperty(_assertThisInitialized(_this), "handleSuggestionsMouseDown", function (ev) {
+        _this._suggestionsMouseDown = !0
+      }), _defineProperty(_assertThisInitialized(_this), "handleSuggestionsMouseEnter", function (focusIndex) {
+        _this.setState({
+          focusIndex: focusIndex,
+          scrollFocusedIntoView: !1
+        })
+      }), _defineProperty(_assertThisInitialized(_this), "updateSuggestionsPosition", function () {
+        var caretPosition = _this.state.caretPosition, _this$props5 = _this.props, suggestionsPortalHost = _this$props5.suggestionsPortalHost, allowSuggestionsAboveCursor = _this$props5.allowSuggestionsAboveCursor, forceSuggestionsAboveCursor = _this$props5.forceSuggestionsAboveCursor
+        if (caretPosition && _this.suggestionsElement) {
+          var suggestions = _this.suggestionsElement, highlighter = _this.highlighterElement, caretOffsetParentRect = highlighter.getBoundingClientRect(), caretHeight = getComputedStyleLengthProp(highlighter, "font-size"), viewportRelative = {
+            left: caretOffsetParentRect.left + caretPosition.left,
+            top: caretOffsetParentRect.top + caretPosition.top + caretHeight
+          }, viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)
+          if (suggestions) {
+            var position = {}
+            if (suggestionsPortalHost) {
+              position.position = "fixed"
+              var left = viewportRelative.left, top = viewportRelative.top
+              left -= getComputedStyleLengthProp(suggestions, "margin-left"), top -= getComputedStyleLengthProp(suggestions, "margin-top"),
+                left -= highlighter.scrollLeft, top -= highlighter.scrollTop
+              var viewportWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)
+              left + suggestions.offsetWidth > viewportWidth ? position.left = Math.max(0, viewportWidth - suggestions.offsetWidth) : position.left = left,
+                allowSuggestionsAboveCursor && top + suggestions.offsetHeight > viewportHeight && suggestions.offsetHeight < top - caretHeight || forceSuggestionsAboveCursor ? position.top = Math.max(0, top - suggestions.offsetHeight - caretHeight) : position.top = top
+            } else {
+              var _left = caretPosition.left - highlighter.scrollLeft, _top = caretPosition.top - highlighter.scrollTop
+              _left + suggestions.offsetWidth > _this.containerElement.offsetWidth ? position.right = 0 : position.left = _left,
+                allowSuggestionsAboveCursor && viewportRelative.top - highlighter.scrollTop + suggestions.offsetHeight > viewportHeight && suggestions.offsetHeight < caretOffsetParentRect.top - caretHeight - highlighter.scrollTop || forceSuggestionsAboveCursor ? position.top = _top - suggestions.offsetHeight - caretHeight : position.top = _top
+            }
+            position.left === _this.state.suggestionsPosition.left && position.top === _this.state.suggestionsPosition.top && position.position === _this.state.suggestionsPosition.position || _this.setState({
+              suggestionsPosition: position
+            })
           }
-          position.left === _this.state.suggestionsPosition.left && position.top === _this.state.suggestionsPosition.top && position.position === _this.state.suggestionsPosition.position || _this.setState({
-            suggestionsPosition: position
-          });
         }
-      }
-    }), _defineProperty(_assertThisInitialized(_this), "updateHighlighterScroll", function() {
-      var input = _this.inputElement, highlighter = _this.highlighterElement;
-      input && highlighter && (highlighter.scrollLeft = input.scrollLeft, highlighter.scrollTop = input.scrollTop, 
-      highlighter.height = input.height);
-    }), _defineProperty(_assertThisInitialized(_this), "handleCompositionStart", function() {
-      isComposing = !0;
-    }), _defineProperty(_assertThisInitialized(_this), "handleCompositionEnd", function() {
-      isComposing = !1;
-    }), _defineProperty(_assertThisInitialized(_this), "setSelection", function(selectionStart, selectionEnd) {
-      if (null !== selectionStart && null !== selectionEnd) {
-        var el = _this.inputElement;
-        if (el.setSelectionRange) el.setSelectionRange(selectionStart, selectionEnd); else if (el.createTextRange) {
-          var range = el.createTextRange();
-          range.collapse(!0), range.moveEnd("character", selectionEnd), range.moveStart("character", selectionStart), 
-          range.select();
+      }), _defineProperty(_assertThisInitialized(_this), "updateHighlighterScroll", function () {
+        var input = _this.inputElement, highlighter = _this.highlighterElement
+        input && highlighter && (highlighter.scrollLeft = input.scrollLeft, highlighter.scrollTop = input.scrollTop,
+          highlighter.height = input.height)
+      }), _defineProperty(_assertThisInitialized(_this), "handleCompositionStart", function () {
+        isComposing = !0
+      }), _defineProperty(_assertThisInitialized(_this), "handleCompositionEnd", function () {
+        isComposing = !1
+      }), _defineProperty(_assertThisInitialized(_this), "setSelection", function (selectionStart, selectionEnd) {
+        if (null !== selectionStart && null !== selectionEnd) {
+          var el = _this.inputElement
+          if (el.setSelectionRange) el.setSelectionRange(selectionStart, selectionEnd); else if (el.createTextRange) {
+            var range = el.createTextRange()
+            range.collapse(!0), range.moveEnd("character", selectionEnd), range.moveStart("character", selectionStart),
+              range.select()
+          }
         }
-      }
-    }), _defineProperty(_assertThisInitialized(_this), "updateMentionsQueries", function(plainTextValue, caretPosition) {
-      _this._queryId++, _this.suggestions = {}, _this.setState({
-        suggestions: {}
-      });
-      var value = _this.props.value || "", children = _this.props.children, config = readConfigFromChildren(children), positionInValue = mapPlainTextIndex(value, config, caretPosition, "NULL");
-      if (null !== positionInValue) {
-        var substringStartIndex = getEndOfLastMention(value.substring(0, positionInValue), config), substring = plainTextValue.substring(substringStartIndex, caretPosition);
-        React__default.Children.forEach(children, function(child, childIndex) {
-          if (child) {
-            var regex = makeTriggerRegex(child.props.trigger, _this.props), match = substring.match(regex);
-            if (match) {
-              var querySequenceStart = substringStartIndex + substring.indexOf(match[1], match.index);
-              _this.queryData(match[2], childIndex, querySequenceStart, querySequenceStart + match[1].length, plainTextValue);
+      }), _defineProperty(_assertThisInitialized(_this), "updateMentionsQueries", function (plainTextValue, caretPosition) {
+        _this._queryId++, _this.suggestions = {}, _this.setState({
+          suggestions: {}
+        })
+        var value = _this.props.value || "", children = _this.props.children, config = readConfigFromChildren(children), positionInValue = mapPlainTextIndex(value, config, caretPosition, "NULL")
+        if (null !== positionInValue) {
+          var substringStartIndex = getEndOfLastMention(value.substring(0, positionInValue), config), substring = plainTextValue.substring(substringStartIndex, caretPosition)
+          React__default.Children.forEach(children, function (child, childIndex) {
+            if (child) {
+              var regex = makeTriggerRegex(child.props.trigger, _this.props), match = substring.match(regex)
+              if (match) {
+                var querySequenceStart = substringStartIndex + substring.indexOf(match[1], match.index)
+                _this.queryData(match[2], childIndex, querySequenceStart, querySequenceStart + match[1].length, plainTextValue)
+              }
             }
+          })
+        }
+      }), _defineProperty(_assertThisInitialized(_this), "clearSuggestions", function () {
+        _this._queryId++, _this.suggestions = {}, _this.setState({
+          suggestions: {},
+          focusIndex: 0
+        })
+      }), _defineProperty(_assertThisInitialized(_this), "queryData", function (query, childIndex, querySequenceStart, querySequenceEnd, plainTextValue) {
+        var _this$props6 = _this.props, children = _this$props6.children, ignoreAccents = _this$props6.ignoreAccents, mentionChild = React.Children.toArray(children)[childIndex], syncResult = getDataProvider(mentionChild.props.data, ignoreAccents)(query, _this.updateSuggestions.bind(null, _this._queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue))
+        syncResult instanceof Array && _this.updateSuggestions(_this._queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue, syncResult)
+      }), _defineProperty(_assertThisInitialized(_this), "updateSuggestions", function (queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue, results) {
+        if (queryId === _this._queryId) {
+          _this.suggestions = _objectSpread$1(_objectSpread$1({}, _this.suggestions), {}, _defineProperty({}, childIndex, {
+            queryInfo: {
+              childIndex: childIndex,
+              query: query,
+              querySequenceStart: querySequenceStart,
+              querySequenceEnd: querySequenceEnd,
+              plainTextValue: plainTextValue
+            },
+            results: results
+          }))
+          var focusIndex = _this.state.focusIndex, suggestionsCount = countSuggestions(_this.suggestions)
+          _this.setState({
+            suggestions: _this.suggestions,
+            focusIndex: focusIndex >= suggestionsCount ? Math.max(suggestionsCount - 1, 0) : focusIndex
+          })
+        }
+      }), _defineProperty(_assertThisInitialized(_this), "addMention", function (_ref2, _ref3) {
+        var id = _ref2.id, display = _ref2.display, childIndex = _ref3.childIndex, querySequenceStart = _ref3.querySequenceStart, querySequenceEnd = _ref3.querySequenceEnd, plainTextValue = _ref3.plainTextValue, value = _this.props.value || "", config = readConfigFromChildren(_this.props.children), _mentionsChild$props = React.Children.toArray(_this.props.children)[childIndex].props, markup = _mentionsChild$props.markup, displayTransform = _mentionsChild$props.displayTransform, appendSpaceOnAdd = _mentionsChild$props.appendSpaceOnAdd, onAdd = _mentionsChild$props.onAdd, start = mapPlainTextIndex(value, config, querySequenceStart, "START"), end = start + querySequenceEnd - querySequenceStart, insert = makeMentionsMarkup(markup, id, display)
+        appendSpaceOnAdd && (insert += " ")
+        var newValue = spliceString(value, start, end, insert)
+        _this.inputElement.focus()
+        var displayValue = displayTransform(id, display)
+        appendSpaceOnAdd && (displayValue += " ")
+        var newCaretPosition = querySequenceStart + displayValue.length
+        _this.setState({
+          selectionStart: newCaretPosition,
+          selectionEnd: newCaretPosition,
+          setSelectionAfterMentionChange: !0
+        })
+        var eventMock = {
+          target: {
+            value: newValue
           }
-        });
-      }
-    }), _defineProperty(_assertThisInitialized(_this), "clearSuggestions", function() {
-      _this._queryId++, _this.suggestions = {}, _this.setState({
+        }, mentions = getMentions(newValue, config), newPlainTextValue = spliceString(plainTextValue, querySequenceStart, querySequenceEnd, displayValue)
+        _this.executeOnChange(eventMock, newValue, newPlainTextValue, mentions), onAdd && onAdd(id, display, start, end),
+          _this.clearSuggestions()
+      }), _defineProperty(_assertThisInitialized(_this), "isLoading", function () {
+        var isLoading = !1
+        return React__default.Children.forEach(_this.props.children, function (child) {
+          isLoading = isLoading || child && child.props.isLoading
+        }), isLoading
+      }), _defineProperty(_assertThisInitialized(_this), "isOpened", function () {
+        return isNumber(_this.state.selectionStart) && (0 !== countSuggestions(_this.state.suggestions) || _this.isLoading())
+      }), _defineProperty(_assertThisInitialized(_this), "_queryId", 0), _this.suggestions = {},
+      _this.uuidSuggestionsOverlay = Math.random().toString(16).substring(2), _this.handleCopy = _this.handleCopy.bind(_assertThisInitialized(_this)),
+      _this.handleCut = _this.handleCut.bind(_assertThisInitialized(_this)), _this.handlePaste = _this.handlePaste.bind(_assertThisInitialized(_this)),
+      _this.state = {
+        focusIndex: 0,
+        selectionStart: null,
+        selectionEnd: null,
         suggestions: {},
-        focusIndex: 0
-      });
-    }), _defineProperty(_assertThisInitialized(_this), "queryData", function(query, childIndex, querySequenceStart, querySequenceEnd, plainTextValue) {
-      var _this$props6 = _this.props, children = _this$props6.children, ignoreAccents = _this$props6.ignoreAccents, mentionChild = React.Children.toArray(children)[childIndex], syncResult = getDataProvider(mentionChild.props.data, ignoreAccents)(query, _this.updateSuggestions.bind(null, _this._queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue));
-      syncResult instanceof Array && _this.updateSuggestions(_this._queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue, syncResult);
-    }), _defineProperty(_assertThisInitialized(_this), "updateSuggestions", function(queryId, childIndex, query, querySequenceStart, querySequenceEnd, plainTextValue, results) {
-      if (queryId === _this._queryId) {
-        _this.suggestions = _objectSpread$1(_objectSpread$1({}, _this.suggestions), {}, _defineProperty({}, childIndex, {
-          queryInfo: {
-            childIndex: childIndex,
-            query: query,
-            querySequenceStart: querySequenceStart,
-            querySequenceEnd: querySequenceEnd,
-            plainTextValue: plainTextValue
-          },
-          results: results
-        }));
-        var focusIndex = _this.state.focusIndex, suggestionsCount = countSuggestions(_this.suggestions);
-        _this.setState({
-          suggestions: _this.suggestions,
-          focusIndex: focusIndex >= suggestionsCount ? Math.max(suggestionsCount - 1, 0) : focusIndex
-        });
-      }
-    }), _defineProperty(_assertThisInitialized(_this), "addMention", function(_ref2, _ref3) {
-      var id = _ref2.id, display = _ref2.display, childIndex = _ref3.childIndex, querySequenceStart = _ref3.querySequenceStart, querySequenceEnd = _ref3.querySequenceEnd, plainTextValue = _ref3.plainTextValue, value = _this.props.value || "", config = readConfigFromChildren(_this.props.children), _mentionsChild$props = React.Children.toArray(_this.props.children)[childIndex].props, markup = _mentionsChild$props.markup, displayTransform = _mentionsChild$props.displayTransform, appendSpaceOnAdd = _mentionsChild$props.appendSpaceOnAdd, onAdd = _mentionsChild$props.onAdd, start = mapPlainTextIndex(value, config, querySequenceStart, "START"), end = start + querySequenceEnd - querySequenceStart, insert = makeMentionsMarkup(markup, id, display);
-      appendSpaceOnAdd && (insert += " ");
-      var newValue = spliceString(value, start, end, insert);
-      _this.inputElement.focus();
-      var displayValue = displayTransform(id, display);
-      appendSpaceOnAdd && (displayValue += " ");
-      var newCaretPosition = querySequenceStart + displayValue.length;
-      _this.setState({
-        selectionStart: newCaretPosition,
-        selectionEnd: newCaretPosition,
-        setSelectionAfterMentionChange: !0
-      });
-      var eventMock = {
-        target: {
-          value: newValue
-        }
-      }, mentions = getMentions(newValue, config), newPlainTextValue = spliceString(plainTextValue, querySequenceStart, querySequenceEnd, displayValue);
-      _this.executeOnChange(eventMock, newValue, newPlainTextValue, mentions), onAdd && onAdd(id, display, start, end), 
-      _this.clearSuggestions();
-    }), _defineProperty(_assertThisInitialized(_this), "isLoading", function() {
-      var isLoading = !1;
-      return React__default.Children.forEach(_this.props.children, function(child) {
-        isLoading = isLoading || child && child.props.isLoading;
-      }), isLoading;
-    }), _defineProperty(_assertThisInitialized(_this), "isOpened", function() {
-      return isNumber(_this.state.selectionStart) && (0 !== countSuggestions(_this.state.suggestions) || _this.isLoading());
-    }), _defineProperty(_assertThisInitialized(_this), "_queryId", 0), _this.suggestions = {}, 
-    _this.uuidSuggestionsOverlay = Math.random().toString(16).substring(2), _this.handleCopy = _this.handleCopy.bind(_assertThisInitialized(_this)), 
-    _this.handleCut = _this.handleCut.bind(_assertThisInitialized(_this)), _this.handlePaste = _this.handlePaste.bind(_assertThisInitialized(_this)), 
-    _this.state = {
-      focusIndex: 0,
-      selectionStart: null,
-      selectionEnd: null,
-      suggestions: {},
-      caretPosition: null,
-      suggestionsPosition: {},
-      setSelectionAfterHandlePaste: !1
-    }, _this;
+        caretPosition: null,
+        suggestionsPosition: {},
+        setSelectionAfterHandlePaste: !1
+      }, _this
   }
-  return _createClass(MentionsInput, [ {
+  return _createClass(MentionsInput, [{
     key: "componentDidMount",
-    value: function() {
+    value: function () {
       document.addEventListener("copy", this.handleCopy), document.addEventListener("cut", this.handleCut),
-      document.addEventListener("paste", this.handlePaste), this.updateSuggestionsPosition();
+        document.addEventListener("paste", this.handlePaste), this.updateSuggestionsPosition()
     }
   }, {
     key: "componentDidUpdate",
-    value: function(prevProps, prevState) {
+    value: function (prevProps, prevState) {
       prevState.suggestionsPosition === this.state.suggestionsPosition && this.updateSuggestionsPosition(),
-      this.state.setSelectionAfterMentionChange && (this.setState({
-        setSelectionAfterMentionChange: !1
-      }), this.setSelection(this.state.selectionStart, this.state.selectionEnd)), this.state.setSelectionAfterHandlePaste && (this.setState({
-        setSelectionAfterHandlePaste: !1
-      }), this.setSelection(this.state.selectionStart, this.state.selectionEnd));
+        this.state.setSelectionAfterMentionChange && (this.setState({
+          setSelectionAfterMentionChange: !1
+        }), this.setSelection(this.state.selectionStart, this.state.selectionEnd)), this.state.setSelectionAfterHandlePaste && (this.setState({
+          setSelectionAfterHandlePaste: !1
+        }), this.setSelection(this.state.selectionStart, this.state.selectionEnd))
     }
   }, {
     key: "componentWillUnmount",
-    value: function() {
+    value: function () {
       document.removeEventListener("copy", this.handleCopy), document.removeEventListener("cut", this.handleCut),
-      document.removeEventListener("paste", this.handlePaste);
+        document.removeEventListener("paste", this.handlePaste)
     }
   }, {
     key: "render",
-    value: function() {
+    value: function () {
       return React__default.createElement("div", _extends({
         ref: this.setContainerElement
-      }, this.props.style), this.renderControl(), this.renderSuggestionsOverlay());
+      }, this.props.style), this.renderControl(), this.renderSuggestionsOverlay())
     }
   }, {
     key: "handlePaste",
-    value: function(event) {
+    value: function (event) {
       if (event.target === this.inputElement && this.supportsClipboardActions(event)) {
-        event.preventDefault();
+        event.preventDefault()
         var _this$state3 = this.state, selectionStart = _this$state3.selectionStart, selectionEnd = _this$state3.selectionEnd, _this$props7 = this.props, value = _this$props7.value, children = _this$props7.children, config = readConfigFromChildren(children), markupStartIndex = mapPlainTextIndex(value, config, selectionStart, "START"), markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, "END"), pastedMentions = event.clipboardData.getData("text/react-mentions"), pastedData = event.clipboardData.getData("text/plain"), newValue = spliceString(value, markupStartIndex, markupEndIndex, pastedMentions || pastedData).replace(/\r/g, ""), newPlainTextValue = getPlainText(newValue, config), eventMock = {
           target: _objectSpread$1(_objectSpread$1({}, event.target), {}, {
             value: newValue
           })
-        };
-        this.executeOnChange(eventMock, newValue, newPlainTextValue, getMentions(newValue, config));
-        var nextPos = (findStartOfMentionInPlainText(value, config, selectionStart) || selectionStart) + getPlainText(pastedMentions || pastedData, config).length;
+        }
+        this.executeOnChange(eventMock, newValue, newPlainTextValue, getMentions(newValue, config))
+        var nextPos = (findStartOfMentionInPlainText(value, config, selectionStart) || selectionStart) + getPlainText(pastedMentions || pastedData, config).length
         this.setState({
           selectionStart: nextPos,
           selectionEnd: nextPos,
           setSelectionAfterHandlePaste: !0
-        });
+        })
       }
     }
   }, {
     key: "saveSelectionToClipboard",
-    value: function(event) {
-      var selectionStart = this.inputElement.selectionStart, selectionEnd = this.inputElement.selectionEnd, _this$props8 = this.props, children = _this$props8.children, value = _this$props8.value, config = readConfigFromChildren(children), markupStartIndex = mapPlainTextIndex(value, config, selectionStart, "START"), markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, "END");
+    value: function (event) {
+      var selectionStart = this.inputElement.selectionStart, selectionEnd = this.inputElement.selectionEnd, _this$props8 = this.props, children = _this$props8.children, value = _this$props8.value, config = readConfigFromChildren(children), markupStartIndex = mapPlainTextIndex(value, config, selectionStart, "START"), markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, "END")
       event.clipboardData.setData("text/plain", event.target.value.slice(selectionStart, selectionEnd)),
-      event.clipboardData.setData("text/react-mentions", value.slice(markupStartIndex, markupEndIndex));
+        event.clipboardData.setData("text/react-mentions", value.slice(markupStartIndex, markupEndIndex))
     }
   }, {
     key: "supportsClipboardActions",
-    value: function(event) {
-      return !!event.clipboardData;
+    value: function (event) {
+      return !!event.clipboardData
     }
   }, {
     key: "handleCopy",
-    value: function(event) {
+    value: function (event) {
       event.target === this.inputElement && this.supportsClipboardActions(event) && (event.preventDefault(),
-      this.saveSelectionToClipboard(event));
+        this.saveSelectionToClipboard(event))
     }
   }, {
     key: "handleCut",
-    value: function(event) {
+    value: function (event) {
       if (event.target === this.inputElement && this.supportsClipboardActions(event)) {
-        event.preventDefault(), this.saveSelectionToClipboard(event);
-        var _this$state4 = this.state, selectionStart = _this$state4.selectionStart, selectionEnd = _this$state4.selectionEnd, _this$props9 = this.props, children = _this$props9.children, value = _this$props9.value, config = readConfigFromChildren(children), markupStartIndex = mapPlainTextIndex(value, config, selectionStart, "START"), markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, "END"), newValue = [ value.slice(0, markupStartIndex), value.slice(markupEndIndex) ].join(""), newPlainTextValue = getPlainText(newValue, config), eventMock = {
+        event.preventDefault(), this.saveSelectionToClipboard(event)
+        var _this$state4 = this.state, selectionStart = _this$state4.selectionStart, selectionEnd = _this$state4.selectionEnd, _this$props9 = this.props, children = _this$props9.children, value = _this$props9.value, config = readConfigFromChildren(children), markupStartIndex = mapPlainTextIndex(value, config, selectionStart, "START"), markupEndIndex = mapPlainTextIndex(value, config, selectionEnd, "END"), newValue = [value.slice(0, markupStartIndex), value.slice(markupEndIndex)].join(""), newPlainTextValue = getPlainText(newValue, config), eventMock = {
           target: _objectSpread$1(_objectSpread$1({}, event.target), {}, {
             value: newPlainTextValue
           })
-        };
-        this.executeOnChange(eventMock, newValue, newPlainTextValue, getMentions(value, config));
+        }
+        this.executeOnChange(eventMock, newValue, newPlainTextValue, getMentions(value, config))
       }
     }
-  } ]), MentionsInput;
-}(React__default.Component);
+  }]), MentionsInput
+}(React__default.Component)
 
 _defineProperty(MentionsInput, "propTypes", propTypes), _defineProperty(MentionsInput, "defaultProps", {
   ignoreAccents: !1,
   singleLine: !1,
   allowSuggestionsAboveCursor: !1,
-  onKeyDown: function() {
-    return null;
+  onKeyDown: function () {
+    return null
   },
-  onSelect: function() {
-    return null;
+  onSelect: function () {
+    return null
   },
-  onBlur: function() {
-    return null;
+  onBlur: function () {
+    return null
   }
-});
+})
 
-var getComputedStyleLengthProp = function(forElement, propertyName) {
-  var length = parseFloat(window.getComputedStyle(forElement, null).getPropertyValue(propertyName));
-  return isFinite(length) ? length : 0;
+var getComputedStyleLengthProp = function (forElement, propertyName) {
+  var length = parseFloat(window.getComputedStyle(forElement, null).getPropertyValue(propertyName))
+  return isFinite(length) ? length : 0
 }, isMobileSafari = "undefined" != typeof navigator && /iPhone|iPad|iPod/i.test(navigator.userAgent), styled$3 = createDefaultStyle({
   position: "relative",
   overflowY: "visible",
@@ -1221,28 +1221,28 @@ var getComputedStyleLengthProp = function(forElement, propertyName) {
       marginLeft: -3
     } : null)
   }
-}, function(_ref4) {
-  var singleLine = _ref4.singleLine;
+}, function (_ref4) {
+  var singleLine = _ref4.singleLine
   return {
     "&singleLine": singleLine,
     "&multiLine": !singleLine
-  };
+  }
 }), MentionsInput$1 = styled$3(MentionsInput), defaultStyle = {
   fontWeight: "inherit"
-}, Mention = function(_ref) {
+}, Mention = function (_ref) {
   var display = _ref.display, style = _ref.style, className = _ref.className, classNames = _ref.classNames, styles = useStyles__default(defaultStyle, {
     style: style,
     className: className,
     classNames: classNames
-  });
-  return React__default.createElement("strong", styles, display);
-};
+  })
+  return React__default.createElement("strong", styles, display)
+}
 
 Mention.propTypes = {
   onAdd: PropTypes.func,
   onRemove: PropTypes.func,
   renderSuggestion: PropTypes.func,
-  trigger: PropTypes.oneOfType([ PropTypes.string, PropTypes.instanceOf(RegExp) ]),
+  trigger: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(RegExp)]),
   markup: PropTypes.string,
   displayTransform: PropTypes.func,
   allowSpaceInQuery: PropTypes.bool,
@@ -1250,16 +1250,16 @@ Mention.propTypes = {
 }, Mention.defaultProps = {
   trigger: "@",
   markup: "@[__display__](__id__)",
-  displayTransform: function(id, display) {
-    return display || id;
+  displayTransform: function (id, display) {
+    return display || id
   },
-  onAdd: function() {
-    return null;
+  onAdd: function () {
+    return null
   },
-  onRemove: function() {
-    return null;
+  onRemove: function () {
+    return null
   },
   renderSuggestion: null,
   isLoading: !1,
   appendSpaceOnAdd: !1
-}, exports.Mention = Mention, exports.MentionsInput = MentionsInput$1;
+}, exports.Mention = Mention, exports.MentionsInput = MentionsInput$1
