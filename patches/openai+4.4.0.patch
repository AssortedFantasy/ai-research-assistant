diff --git a/node_modules/openai/_shims/agent.node.mjs b/node_modules/openai/_shims/agent.node.mjs
index 2e81430..c1e456d 100644
--- a/node_modules/openai/_shims/agent.node.mjs
+++ b/node_modules/openai/_shims/agent.node.mjs
@@ -1,14 +1,17 @@
 /**
  * Disclaimer: modules in _shims aren't intended to be imported by SDK users.
  */
-import KeepAliveAgent from 'agentkeepalive';
-import { AbortController as AbortControllerPolyfill } from 'abort-controller';
-const defaultHttpAgent = new KeepAliveAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });
-const defaultHttpsAgent = new KeepAliveAgent.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });
+// import KeepAliveAgent from 'agentkeepalive';
+// import { AbortController as AbortControllerPolyfill } from 'abort-controller';
+// const defaultHttpAgent = new KeepAliveAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });
+// const defaultHttpsAgent = new KeepAliveAgent.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });
+const defaultHttpAgent = {}
+const defaultHttpsAgent = {}
 // Polyfill global object if needed.
-if (typeof AbortController === 'undefined') {
-  AbortController = AbortControllerPolyfill;
-}
+// if (typeof AbortController === 'undefined') {
+//   AbortController = AbortControllerPolyfill;
+// }
+
 export const getDefaultAgent = (url) => {
   if (defaultHttpsAgent && url.startsWith('https')) return defaultHttpsAgent;
   return defaultHttpAgent;
diff --git a/node_modules/openai/_shims/node-readable.node.mjs b/node_modules/openai/_shims/node-readable.node.mjs
index 527483b..72f8352 100644
--- a/node_modules/openai/_shims/node-readable.node.mjs
+++ b/node_modules/openai/_shims/node-readable.node.mjs
@@ -1,5 +1,6 @@
-import { ReadStream as FsReadStream } from 'node:fs';
+// import { ReadStream as FsReadStream } from 'node:fs';
 export function isFsReadStream(value) {
-  return value instanceof FsReadStream;
+  // return value instanceof FsReadStream;
+  return false;
 }
 //# sourceMappingURL=node-readable.node.mjs.map
diff --git a/node_modules/openai/core.mjs b/node_modules/openai/core.mjs
index 1ad3753..9e013d4 100644
--- a/node_modules/openai/core.mjs
+++ b/node_modules/openai/core.mjs
@@ -201,7 +201,7 @@ export class APIClient {
         _c !== void 0
       ) ?
         _c
-      : getDefaultAgent(url);
+      : undefined;
     const minAgentTimeout = timeout + 1000;
     if (
       typeof ((
@@ -237,10 +237,10 @@ export class APIClient {
       method,
       ...(body && { body: body }),
       headers: reqHeaders,
-      ...(httpAgent && { agent: httpAgent }),
+      // ...(httpAgent && { agent: httpAgent }),
       // @ts-ignore node-fetch uses a custom AbortSignal type that is
       // not compatible with standard web types
-      signal: (_f = options.signal) !== null && _f !== void 0 ? _f : null,
+      // signal: (_f = options.signal) !== null && _f !== void 0 ? _f : null,
     };
     this.validateHeaders(reqHeaders, headers);
     return { req, url, timeout };
@@ -277,7 +277,7 @@ export class APIClient {
     if ((_b = options.signal) === null || _b === void 0 ? void 0 : _b.aborted) {
       throw new APIUserAbortError();
     }
-    const controller = new AbortController();
+    const controller = {};
     const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);
     if (response instanceof Error) {
       if ((_c = options.signal) === null || _c === void 0 ? void 0 : _c.aborted) {
