diff --git a/node_modules/@anthropic-ai/sdk/_shims/agent.node.mjs b/node_modules/@anthropic-ai/sdk/_shims/agent.node.mjs
index 2e81430..7bb8a80 100644
--- a/node_modules/@anthropic-ai/sdk/_shims/agent.node.mjs
+++ b/node_modules/@anthropic-ai/sdk/_shims/agent.node.mjs
@@ -1,16 +1,20 @@
 /**
  * Disclaimer: modules in _shims aren't intended to be imported by SDK users.
  */
-import KeepAliveAgent from 'agentkeepalive';
-import { AbortController as AbortControllerPolyfill } from 'abort-controller';
-const defaultHttpAgent = new KeepAliveAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });
-const defaultHttpsAgent = new KeepAliveAgent.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });
-// Polyfill global object if needed.
-if (typeof AbortController === 'undefined') {
-  AbortController = AbortControllerPolyfill;
-}
+// import KeepAliveAgent from 'agentkeepalive';
+// import { AbortController as AbortControllerPolyfill } from 'abort-controller';
+// const defaultHttpAgent = new KeepAliveAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });
+// const defaultHttpsAgent = new KeepAliveAgent.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1000 });
+// // Polyfill global object if needed.
+// if (typeof AbortController === 'undefined') {
+//   AbortController = AbortControllerPolyfill;
+// }
+// export const getDefaultAgent = (url) => {
+//   if (defaultHttpsAgent && url.startsWith('https')) return defaultHttpsAgent;
+//   return defaultHttpAgent;
+// };
+//# sourceMappingURL=agent.node.mjs.map
+
 export const getDefaultAgent = (url) => {
-  if (defaultHttpsAgent && url.startsWith('https')) return defaultHttpsAgent;
-  return defaultHttpAgent;
+  return undefined;
 };
\ No newline at end of file
-//# sourceMappingURL=agent.node.mjs.map
diff --git a/node_modules/@anthropic-ai/sdk/_shims/node-readable.node.mjs b/node_modules/@anthropic-ai/sdk/_shims/node-readable.node.mjs
index 527483b..20a8580 100644
--- a/node_modules/@anthropic-ai/sdk/_shims/node-readable.node.mjs
+++ b/node_modules/@anthropic-ai/sdk/_shims/node-readable.node.mjs
@@ -1,4 +1,4 @@
-import { ReadStream as FsReadStream } from 'node:fs';
+// import { ReadStream as FsReadStream } from 'node:fs';
 export function isFsReadStream(value) {
   return value instanceof FsReadStream;
 }
